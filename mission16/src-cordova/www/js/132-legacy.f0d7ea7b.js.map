{"version":3,"file":"js/132-legacy.f0d7ea7b.js","mappings":"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","sources":["webpack://mission16/./node_modules/@firebase/util/dist/index.esm2017.js","webpack://mission16/./node_modules/@firebase/component/dist/esm/index.esm2017.js","webpack://mission16/./node_modules/@firebase/logger/dist/esm/index.esm2017.js","webpack://mission16/./node_modules/@firebase/app/dist/esm/index.esm2017.js","webpack://mission16/./node_modules/@firebase/app-compat/dist/esm/index.esm2017.js","webpack://mission16/./node_modules/firebase/compat/app/dist/index.esm.js","webpack://mission16/./node_modules/@firebase/database/dist/index.esm2017.js","webpack://mission16/./node_modules/@firebase/database-compat/dist/index.esm2017.js","webpack://mission16/./node_modules/@firebase/storage/dist/index.esm2017.js","webpack://mission16/./node_modules/@firebase/storage-compat/dist/esm/index.esm2017.js","webpack://mission16/./src/datasources/firebase.js","webpack://mission16/./node_modules/vuetify/lib/components/VGrid/VCol.js","webpack://mission16/./node_modules/vuetify/lib/components/VGrid/grid.js","webpack://mission16/./node_modules/vuetify/lib/components/VGrid/VContainer.js","webpack://mission16/./node_modules/vuetify/lib/components/VGrid/VRow.js"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    return typeof indexedDB === 'object';\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if (e.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nfunction promisifyRequest(request, errorMessage) {\r\n    return new Promise((resolve, reject) => {\r\n        request.onsuccess = event => {\r\n            resolve(event.target.result);\r\n        };\r\n        request.onerror = event => {\r\n            var _a;\r\n            reject(`${errorMessage}: ${(_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message}`);\r\n        };\r\n    });\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass DBWrapper {\r\n    constructor(_db) {\r\n        this._db = _db;\r\n        this.objectStoreNames = this._db.objectStoreNames;\r\n    }\r\n    transaction(storeNames, mode = 'readonly') {\r\n        return new TransactionWrapper(this._db.transaction.call(this._db, storeNames, mode));\r\n    }\r\n    createObjectStore(storeName, options) {\r\n        return new ObjectStoreWrapper(this._db.createObjectStore(storeName, options));\r\n    }\r\n    close() {\r\n        this._db.close();\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass TransactionWrapper {\r\n    constructor(_transaction) {\r\n        this._transaction = _transaction;\r\n        this.complete = new Promise((resolve, reject) => {\r\n            this._transaction.oncomplete = function () {\r\n                resolve();\r\n            };\r\n            this._transaction.onerror = () => {\r\n                reject(this._transaction.error);\r\n            };\r\n            this._transaction.onabort = () => {\r\n                reject(this._transaction.error);\r\n            };\r\n        });\r\n    }\r\n    objectStore(storeName) {\r\n        return new ObjectStoreWrapper(this._transaction.objectStore(storeName));\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ObjectStoreWrapper {\r\n    constructor(_store) {\r\n        this._store = _store;\r\n    }\r\n    index(name) {\r\n        return new IndexWrapper(this._store.index(name));\r\n    }\r\n    createIndex(name, keypath, options) {\r\n        return new IndexWrapper(this._store.createIndex(name, keypath, options));\r\n    }\r\n    get(key) {\r\n        const request = this._store.get(key);\r\n        return promisifyRequest(request, 'Error reading from IndexedDB');\r\n    }\r\n    put(value, key) {\r\n        const request = this._store.put(value, key);\r\n        return promisifyRequest(request, 'Error writing to IndexedDB');\r\n    }\r\n    delete(key) {\r\n        const request = this._store.delete(key);\r\n        return promisifyRequest(request, 'Error deleting from IndexedDB');\r\n    }\r\n    clear() {\r\n        const request = this._store.clear();\r\n        return promisifyRequest(request, 'Error clearing IndexedDB object store');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass IndexWrapper {\r\n    constructor(_index) {\r\n        this._index = _index;\r\n    }\r\n    get(key) {\r\n        const request = this._index.get(key);\r\n        return promisifyRequest(request, 'Error reading from IndexedDB');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction openDB(dbName, dbVersion, upgradeCallback) {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            const request = indexedDB.open(dbName, dbVersion);\r\n            request.onsuccess = event => {\r\n                resolve(new DBWrapper(event.target.result));\r\n            };\r\n            request.onerror = event => {\r\n                var _a;\r\n                reject(`Error opening indexedDB: ${(_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message}`);\r\n            };\r\n            request.onupgradeneeded = event => {\r\n                upgradeCallback(new DBWrapper(request.result), event.oldVersion, event.newVersion, new TransactionWrapper(request.transaction));\r\n            };\r\n        }\r\n        catch (e) {\r\n            reject(`Error opening indexedDB: ${e.message}`);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @internal\r\n */\r\nasync function deleteDB(dbName) {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            const request = indexedDB.deleteDatabase(dbName);\r\n            request.onsuccess = () => {\r\n                resolve();\r\n            };\r\n            request.onerror = event => {\r\n                var _a;\r\n                reject(`Error deleting indexedDB database \"${dbName}\": ${(_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message}`);\r\n            };\r\n        }\r\n        catch (e) {\r\n            reject(`Error deleting indexedDB database \"${dbName}\": ${e.message}`);\r\n        }\r\n    });\r\n}\n\nexport { CONSTANTS, DBWrapper, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, deleteDB, errorPrefix, extractQuerystring, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, openDB, ordinal, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual, openDB, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.21\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"9.6.11\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"storage-open\" /* STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-get\" /* STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-set\" /* STORAGE_WRITE */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-delete\" /* STORAGE_DELETE */]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(options, rawConfig = {}) {\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, (db, oldVersion) => {\r\n            // We don't use 'break' in this switch statement, the fall-through\r\n            // behavior is what we want, because if there are multiple versions between\r\n            // the old version and the current version, we want ALL the migrations\r\n            // that correspond to those versions to run, not only the last one.\r\n            // eslint-disable-next-line default-case\r\n            switch (oldVersion) {\r\n                case 0:\r\n                    db.createObjectStore(STORE_NAME);\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        return db\r\n            .transaction(STORE_NAME)\r\n            .objectStore(STORE_NAME)\r\n            .get(computeKey(app));\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-get\" /* STORAGE_GET */, {\r\n            originalErrorMessage: e.message\r\n        });\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        return tx.complete;\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-set\" /* STORAGE_WRITE */, {\r\n            originalErrorMessage: e.message\r\n        });\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const agent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (this._heartbeatsCache === null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n        }\r\n        // Do not store a heartbeat if one is already stored for this day\r\n        // or if a header has already been sent today.\r\n        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.heartbeats.push({ date, agent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null or the array is empty, there is no data to send.\r\n        if (this._heartbeatsCache === null ||\r\n            this._heartbeatsCache.heartbeats.length === 0) {\r\n            return '';\r\n        }\r\n        const date = getUTCDateString();\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        // Store last sent date to prevent another being logged/sent for the same day.\r\n        this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache.heartbeats = unsentEntries;\r\n            // This seems more likely than emptying the array (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache.heartbeats = [];\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            return idbHeartbeatObject || { heartbeats: [] };\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","import { ErrorFactory, contains, deepExtend, createSubscribe, isBrowser } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport * as modularAPIs from '@firebase/app';\nimport { _addComponent, deleteApp, _DEFAULT_ENTRY_NAME, _addOrOverwriteComponent, registerVersion } from '@firebase/app';\nimport { Logger } from '@firebase/logger';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Global context object for a collection of services using\r\n * a shared authentication state.\r\n *\r\n * marked as internal because it references internal types exported from @firebase/app\r\n * @internal\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(_delegate, firebase) {\r\n        this._delegate = _delegate;\r\n        this.firebase = firebase;\r\n        // add itself to container\r\n        _addComponent(_delegate, new Component('app-compat', () => this, \"PUBLIC\" /* PUBLIC */));\r\n        this.container = _delegate.container;\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        return this._delegate.automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this._delegate.automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        return this._delegate.name;\r\n    }\r\n    get options() {\r\n        return this._delegate.options;\r\n    }\r\n    delete() {\r\n        return new Promise(resolve => {\r\n            this._delegate.checkDestroyed();\r\n            resolve();\r\n        }).then(() => {\r\n            this.firebase.INTERNAL.removeApp(this.name);\r\n            return deleteApp(this._delegate);\r\n        });\r\n    }\r\n    /**\r\n     * Return a service instance associated with this app (creating it\r\n     * on demand), identified by the passed instanceIdentifier.\r\n     *\r\n     * NOTE: Currently storage and functions are the only ones that are leveraging this\r\n     * functionality. They invoke it by calling:\r\n     *\r\n     * ```javascript\r\n     * firebase.app().storage('STORAGE BUCKET ID')\r\n     * ```\r\n     *\r\n     * The service name is passed to this already\r\n     * @internal\r\n     */\r\n    _getService(name, instanceIdentifier = _DEFAULT_ENTRY_NAME) {\r\n        var _a;\r\n        this._delegate.checkDestroyed();\r\n        // Initialize instance if InstatiationMode is `EXPLICIT`.\r\n        const provider = this._delegate.container.getProvider(name);\r\n        if (!provider.isInitialized() &&\r\n            ((_a = provider.getComponent()) === null || _a === void 0 ? void 0 : _a.instantiationMode) === \"EXPLICIT\" /* EXPLICIT */) {\r\n            provider.initialize();\r\n        }\r\n        // getImmediate will always succeed because _getService is only called for registered components.\r\n        return provider.getImmediate({\r\n            identifier: instanceIdentifier\r\n        });\r\n    }\r\n    /**\r\n     * Remove a service instance from the cache, so we will create a new instance for this service\r\n     * when people try to get it again.\r\n     *\r\n     * NOTE: currently only firestore uses this functionality to support firestore shutdown.\r\n     *\r\n     * @param name The service name\r\n     * @param instanceIdentifier instance identifier in case multiple instances are allowed\r\n     * @internal\r\n     */\r\n    _removeServiceInstance(name, instanceIdentifier = _DEFAULT_ENTRY_NAME) {\r\n        this._delegate.container\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            .getProvider(name)\r\n            .clearInstance(instanceIdentifier);\r\n    }\r\n    /**\r\n     * @param component the component being added to this app's container\r\n     * @internal\r\n     */\r\n    _addComponent(component) {\r\n        _addComponent(this._delegate, component);\r\n    }\r\n    _addOrOverwriteComponent(component) {\r\n        _addOrOverwriteComponent(this._delegate, component);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            name: this.name,\r\n            automaticDataCollectionEnabled: this.automaticDataCollectionEnabled,\r\n            options: this.options\r\n        };\r\n    }\r\n}\r\n// TODO: investigate why the following needs to be commented out\r\n// Prevent dead-code elimination of these methods w/o invalid property\r\n// copying.\r\n// (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||\r\n//   FirebaseAppImpl.prototype.delete ||\r\n//   console.log('dc');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app-compat', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Because auth can't share code with other components, we attach the utility functions\r\n * in an internal namespace to share code.\r\n * This function return a firebase namespace object without\r\n * any utility functions, so it can be shared between the regular firebaseNamespace and\r\n * the lite version.\r\n */\r\nfunction createFirebaseNamespaceCore(firebaseAppImpl) {\r\n    const apps = {};\r\n    // // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    // const components = new Map<string, Component<any>>();\r\n    // A namespace is a plain JavaScript Object.\r\n    const namespace = {\r\n        // Hack to prevent Babel from modifying the object returned\r\n        // as the firebase namespace.\r\n        // @ts-ignore\r\n        __esModule: true,\r\n        initializeApp: initializeAppCompat,\r\n        // @ts-ignore\r\n        app,\r\n        registerVersion: modularAPIs.registerVersion,\r\n        setLogLevel: modularAPIs.setLogLevel,\r\n        onLog: modularAPIs.onLog,\r\n        // @ts-ignore\r\n        apps: null,\r\n        SDK_VERSION: modularAPIs.SDK_VERSION,\r\n        INTERNAL: {\r\n            registerComponent: registerComponentCompat,\r\n            removeApp,\r\n            useAsService,\r\n            modularAPIs\r\n        }\r\n    };\r\n    // Inject a circular default export to allow Babel users who were previously\r\n    // using:\r\n    //\r\n    //   import firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase').default;\r\n    //\r\n    // instead of\r\n    //\r\n    //   import * as firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase');\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    namespace['default'] = namespace;\r\n    // firebase.apps is a read-only getter.\r\n    Object.defineProperty(namespace, 'apps', {\r\n        get: getApps\r\n    });\r\n    /**\r\n     * Called by App.delete() - but before any services associated with the App\r\n     * are deleted.\r\n     */\r\n    function removeApp(name) {\r\n        delete apps[name];\r\n    }\r\n    /**\r\n     * Get the App object for a given name (or DEFAULT).\r\n     */\r\n    function app(name) {\r\n        name = name || modularAPIs._DEFAULT_ENTRY_NAME;\r\n        if (!contains(apps, name)) {\r\n            throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n        }\r\n        return apps[name];\r\n    }\r\n    // @ts-ignore\r\n    app['App'] = firebaseAppImpl;\r\n    /**\r\n     * Create a new App instance (name must be unique).\r\n     *\r\n     * This function is idempotent. It can be called more than once and return the same instance using the same options and config.\r\n     */\r\n    function initializeAppCompat(options, rawConfig = {}) {\r\n        const app = modularAPIs.initializeApp(options, rawConfig);\r\n        if (contains(apps, app.name)) {\r\n            return apps[app.name];\r\n        }\r\n        const appCompat = new firebaseAppImpl(app, namespace);\r\n        apps[app.name] = appCompat;\r\n        return appCompat;\r\n    }\r\n    /*\r\n     * Return an array of all the non-deleted FirebaseApps.\r\n     */\r\n    function getApps() {\r\n        // Make a copy so caller cannot mutate the apps list.\r\n        return Object.keys(apps).map(name => apps[name]);\r\n    }\r\n    function registerComponentCompat(component) {\r\n        const componentName = component.name;\r\n        const componentNameWithoutCompat = componentName.replace('-compat', '');\r\n        if (modularAPIs._registerComponent(component) &&\r\n            component.type === \"PUBLIC\" /* PUBLIC */) {\r\n            // create service namespace for public components\r\n            // The Service namespace is an accessor function ...\r\n            const serviceNamespace = (appArg = app()) => {\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                if (typeof appArg[componentNameWithoutCompat] !== 'function') {\r\n                    // Invalid argument.\r\n                    // This happens in the following case: firebase.storage('gs:/')\r\n                    throw ERROR_FACTORY.create(\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */, {\r\n                        appName: componentName\r\n                    });\r\n                }\r\n                // Forward service instance lookup to the FirebaseApp.\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                return appArg[componentNameWithoutCompat]();\r\n            };\r\n            // ... and a container for service-level properties.\r\n            if (component.serviceProps !== undefined) {\r\n                deepExtend(serviceNamespace, component.serviceProps);\r\n            }\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            namespace[componentNameWithoutCompat] = serviceNamespace;\r\n            // Patch the FirebaseAppImpl prototype\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            firebaseAppImpl.prototype[componentNameWithoutCompat] =\r\n                // TODO: The eslint disable can be removed and the 'ignoreRestArgs'\r\n                // option added to the no-explicit-any rule when ESlint releases it.\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                function (...args) {\r\n                    const serviceFxn = this._getService.bind(this, componentName);\r\n                    return serviceFxn.apply(this, component.multipleInstances ? args : []);\r\n                };\r\n        }\r\n        return component.type === \"PUBLIC\" /* PUBLIC */\r\n            ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                namespace[componentNameWithoutCompat]\r\n            : null;\r\n    }\r\n    // Map the requested service to a registered service name\r\n    // (used to map auth to serverAuth service when needed).\r\n    function useAsService(app, name) {\r\n        if (name === 'serverAuth') {\r\n            return null;\r\n        }\r\n        const useService = name;\r\n        return useService;\r\n    }\r\n    return namespace;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Return a firebase namespace object.\r\n *\r\n * In production, this will be called exactly once and the result\r\n * assigned to the 'firebase' global.  It may be called multiple times\r\n * in unit tests.\r\n */\r\nfunction createFirebaseNamespace() {\r\n    const namespace = createFirebaseNamespaceCore(FirebaseAppImpl);\r\n    namespace.INTERNAL = Object.assign(Object.assign({}, namespace.INTERNAL), { createFirebaseNamespace,\r\n        extendNamespace,\r\n        createSubscribe,\r\n        ErrorFactory,\r\n        deepExtend });\r\n    /**\r\n     * Patch the top-level firebase namespace with additional properties.\r\n     *\r\n     * firebase.INTERNAL.extendNamespace()\r\n     */\r\n    function extendNamespace(props) {\r\n        deepExtend(namespace, props);\r\n    }\r\n    return namespace;\r\n}\r\nconst firebase$1 = createFirebaseNamespace();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app-compat');\n\nconst name = \"@firebase/app-compat\";\nconst version = \"0.1.22\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    // Register `app` package.\r\n    registerVersion(name, version, variant);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Firebase Lite detection\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nif (isBrowser() && self.firebase !== undefined) {\r\n    logger.warn(`\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  `);\r\n    // eslint-disable-next-line\r\n    const sdkVersion = self.firebase.SDK_VERSION;\r\n    if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {\r\n        logger.warn(`\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    `);\r\n    }\r\n}\r\nconst firebase = firebase$1;\r\nregisterCoreComponents();\n\nexport { firebase as default };\n//# sourceMappingURL=index.esm2017.js.map\n","import firebase from '@firebase/app-compat';\nexport { default } from '@firebase/app-compat';\n\nvar name = \"firebase\";\nvar version = \"9.6.11\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfirebase.registerVersion(name, version, 'app-compat');\n//# sourceMappingURL=index.esm.js.map\n","import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, base64, stringToByteArray, Sha1, isNodeSdk, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.12.8\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                const options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                const options = {\r\n                    headers: {\r\n                        'X-Firebase-GMPID': this.applicationId || '',\r\n                        'X-Firebase-AppCheck': this.appCheckToken || ''\r\n                    }\r\n                };\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    this.onDataUpdate_(request['p'], payload, \r\n                    /*isMerge*/ false, \r\n                    /*tag*/ null);\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (!this.connected_) {\r\n            setTimeout(() => {\r\n                const get = this.outstandingGets_[index];\r\n                if (get === undefined || outstandingGet !== get) {\r\n                    return;\r\n                }\r\n                delete this.outstandingGets_[index];\r\n                this.outstandingGetCount_--;\r\n                if (this.outstandingGetCount_ === 0) {\r\n                    this.outstandingGets_ = [];\r\n                }\r\n                this.log_('get ' + index + ' timed out on connection');\r\n                deferred.reject(new Error('Client is offline.'));\r\n            }, GET_CONNECT_TIMEOUT);\r\n        }\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst MIN_PUSH_CHAR = '-';\r\nconst MAX_PUSH_CHAR = 'z';\r\nconst MAX_KEY_LEN = 786;\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\r\nconst successor = function (key) {\r\n    if (key === '' + INTEGER_32_MAX) {\r\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\r\n        return MIN_PUSH_CHAR;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt + 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    if (next.length < MAX_KEY_LEN) {\r\n        next.push(MIN_PUSH_CHAR);\r\n        return next.join('');\r\n    }\r\n    let i = next.length - 1;\r\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\r\n        i--;\r\n    }\r\n    // `successor` was called on the largest possible key, so return the\r\n    // MAX_NAME, which sorts larger than all keys.\r\n    if (i === -1) {\r\n        return MAX_NAME;\r\n    }\r\n    const source = next[i];\r\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\r\n    next[i] = sourcePlusOne;\r\n    return next.slice(0, i + 1).join('');\r\n};\r\n// `key` is assumed to be non-empty.\r\nconst predecessor = function (key) {\r\n    if (key === '' + INTEGER_32_MIN) {\r\n        return MIN_NAME;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt - 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\r\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\r\n    // than that, `predecessor(predecessor(key))`, is\r\n    //\r\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\r\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\r\n    //\r\n    // analogous to increment/decrement for base-10 integers.\r\n    //\r\n    // This works because lexigographic comparison works character-by-character,\r\n    // using length as a tie-breaker if one key is a prefix of the other.\r\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\r\n        if (next.length === 1) {\r\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\r\n            return '' + INTEGER_32_MAX;\r\n        }\r\n        delete next[next.length - 1];\r\n        return next.join('');\r\n    }\r\n    // Replace the last character with it's immediate predecessor, and\r\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\r\n    // lexicographically largest possible key smaller than `key`.\r\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\r\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    let inRange;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let startPost;\r\n                let endPost;\r\n                let cmp;\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    const indexCompare = this.index_.getCompare();\r\n                    cmp = (a, b) => indexCompare(b, a);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                let count = 0;\r\n                let foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    hasStartAfter() {\r\n        return this.startAfterSet_;\r\n    }\r\n    hasEndBefore() {\r\n        return this.endBeforeSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = successor(indexValue);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        let childKey;\r\n        if (key == null) {\r\n            childKey = MAX_NAME;\r\n        }\r\n        else {\r\n            childKey = successor(key);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let childKey;\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = predecessor(indexValue);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        if (key == null) {\r\n            childKey = MIN_NAME;\r\n        }\r\n        else {\r\n            childKey = predecessor(key);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[\"startAt\" /* START_AT */] +=\r\n                ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[\"endAt\" /* END_AT */] +=\r\n                ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === undefined;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        // We may have just removed one of many listeners and can short-circuit this whole process\r\n        // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n        // properly set up.\r\n        //\r\n        // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n        // queryId === 'default'\r\n        const removingDefault = -1 !==\r\n            removed.findIndex(query => {\r\n                return query._queryParams.loadsAllData();\r\n            });\r\n        const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n        if (removingDefault && !covered) {\r\n            const subtree = syncTree.syncPointTree_.subtree(path);\r\n            // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n            // removal\r\n            if (!subtree.isEmpty()) {\r\n                // We need to fold over our subtree and collect the listeners to send\r\n                const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                // Ok, we've collected all the listens we need. Set them up.\r\n                for (let i = 0; i < newViews.length; ++i) {\r\n                    const view = newViews[i], newQuery = view.query;\r\n                    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                    syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                }\r\n            }\r\n        }\r\n        // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n        // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n        // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n        if (!covered && removed.length > 0 && !cancelError) {\r\n            // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n            // default. Otherwise, we need to iterate through and cancel each individual query\r\n            if (removingDefault) {\r\n                // We don't tag default listeners\r\n                const defaultTag = null;\r\n                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n            }\r\n            else {\r\n                removed.forEach((queryToRemove) => {\r\n                    const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                });\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery_(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        const events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n        return Promise.resolve(node);\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    return repoGetValue(query._repo, query).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    return _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","import firebase from '@firebase/app-compat';\nimport { Provider, ComponentContainer, Component } from '@firebase/component';\nimport { _validatePathString, onChildMoved, onChildChanged, onChildRemoved, onChildAdded, onValue, off, get, query, limitToFirst, limitToLast, orderByChild, orderByKey, orderByPriority, orderByValue, startAt, startAfter, endAt, endBefore, equalTo, _ReferenceImpl, _QueryImpl, _QueryParams, child, set, _validateWritablePath, update, setWithPriority, remove, runTransaction, setPriority, push, OnDisconnect as OnDisconnect$1, connectDatabaseEmulator, refFromURL, ref, goOffline, goOnline, serverTimestamp, increment, _setSDKVersion, _repoManagerDatabaseFromApp, enableLogging } from '@firebase/database';\nimport { errorPrefix, validateArgCount, validateCallback, validateContextObject, Deferred } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n\nconst name = \"@firebase/database-compat\";\nconst version = \"0.1.8\";\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database-compat');\r\nconst warn = function (msg) {\r\n    const message = 'FIREBASE WARNING: ' + msg;\r\n    logClient.warn(message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst validateBoolean = function (fnName, argumentName, bool, optional) {\r\n    if (optional && bool === undefined) {\r\n        return;\r\n    }\r\n    if (typeof bool !== 'boolean') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a boolean.');\r\n    }\r\n};\r\nconst validateEventType = function (fnName, eventType, optional) {\r\n    if (optional && eventType === undefined) {\r\n        return;\r\n    }\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(errorPrefix(fnName, 'eventType') +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass OnDisconnect {\r\n    constructor(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    cancel(onComplete) {\r\n        validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\r\n        const result = this._delegate.cancel();\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    remove(onComplete) {\r\n        validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\r\n        const result = this._delegate.remove();\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    set(value, onComplete) {\r\n        validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\r\n        const result = this._delegate.set(value);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    setWithPriority(value, priority, onComplete) {\r\n        validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateCallback('OnDisconnect.setWithPriority', 'onComplete', onComplete, true);\r\n        const result = this._delegate.setWithPriority(value, priority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    update(objectToMerge, onComplete) {\r\n        validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        if (Array.isArray(objectToMerge)) {\r\n            const newObjectToMerge = {};\r\n            for (let i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\r\n        const result = this._delegate.update(objectToMerge);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass TransactionResult {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     */\r\n    constructor(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    toJSON() {\r\n        validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nclass DataSnapshot {\r\n    constructor(_database, _delegate) {\r\n        this._database = _database;\r\n        this._delegate = _delegate;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    val() {\r\n        validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this._delegate.val();\r\n    }\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    exportVal() {\r\n        validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this._delegate.exportVal();\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    toJSON() {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this._delegate.toJSON();\r\n    }\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @returns Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    exists() {\r\n        validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return this._delegate.exists();\r\n    }\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param path - Path to a child.\r\n     * @returns DataSnapshot for child node.\r\n     */\r\n    child(path) {\r\n        validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        path = String(path);\r\n        _validatePathString('DataSnapshot.child', 'path', path, false);\r\n        return new DataSnapshot(this._database, this._delegate.child(path));\r\n    }\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param path - Path to a child.\r\n     * @returns Whether the child exists.\r\n     */\r\n    hasChild(path) {\r\n        validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        _validatePathString('DataSnapshot.hasChild', 'path', path, false);\r\n        return this._delegate.hasChild(path);\r\n    }\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @returns The priority.\r\n     */\r\n    getPriority() {\r\n        validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        return this._delegate.priority;\r\n    }\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each child.\r\n     * @returns True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    forEach(action) {\r\n        validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        validateCallback('DataSnapshot.forEach', 'action', action, false);\r\n        return this._delegate.forEach(expDataSnapshot => action(new DataSnapshot(this._database, expDataSnapshot)));\r\n    }\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @returns True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    hasChildren() {\r\n        validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        return this._delegate.hasChildren();\r\n    }\r\n    get key() {\r\n        return this._delegate.key;\r\n    }\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @returns The number of children that this DataSnapshot contains.\r\n     */\r\n    numChildren() {\r\n        validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this._delegate.size;\r\n    }\r\n    /**\r\n     * @returns The Firebase reference for the location this snapshot's data came\r\n     * from.\r\n     */\r\n    getRef() {\r\n        validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return new Reference(this._database, this._delegate.ref);\r\n    }\r\n    get ref() {\r\n        return this.getRef();\r\n    }\r\n}\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nclass Query {\r\n    constructor(database, _delegate) {\r\n        this.database = database;\r\n        this._delegate = _delegate;\r\n    }\r\n    on(eventType, callback, cancelCallbackOrContext, context) {\r\n        var _a;\r\n        validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateCallback('Query.on', 'callback', callback, false);\r\n        const ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        const valueCallback = (expSnapshot, previousChildName) => {\r\n            callback.call(ret.context, new DataSnapshot(this.database, expSnapshot), previousChildName);\r\n        };\r\n        valueCallback.userCallback = callback;\r\n        valueCallback.context = ret.context;\r\n        const cancelCallback = (_a = ret.cancel) === null || _a === void 0 ? void 0 : _a.bind(ret.context);\r\n        switch (eventType) {\r\n            case 'value':\r\n                onValue(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_added':\r\n                onChildAdded(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_removed':\r\n                onChildRemoved(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_changed':\r\n                onChildChanged(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_moved':\r\n                onChildMoved(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            default:\r\n                throw new Error(errorPrefix('Query.on', 'eventType') +\r\n                    'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                    '\"child_changed\", or \"child_moved\".');\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', eventType, true);\r\n        validateCallback('Query.off', 'callback', callback, true);\r\n        validateContextObject('Query.off', 'context', context, true);\r\n        if (callback) {\r\n            const valueCallback = () => { };\r\n            valueCallback.userCallback = callback;\r\n            valueCallback.context = context;\r\n            off(this._delegate, eventType, valueCallback);\r\n        }\r\n        else {\r\n            off(this._delegate, eventType);\r\n        }\r\n    }\r\n    /**\r\n     * Get the server-value for this query, or return a cached value if not connected.\r\n     */\r\n    get() {\r\n        return get(this._delegate).then(expSnapshot => {\r\n            return new DataSnapshot(this.database, expSnapshot);\r\n        });\r\n    }\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     */\r\n    once(eventType, callback, failureCallbackOrContext, context) {\r\n        validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateCallback('Query.once', 'callback', callback, true);\r\n        const ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);\r\n        const deferred = new Deferred();\r\n        const valueCallback = (expSnapshot, previousChildName) => {\r\n            const result = new DataSnapshot(this.database, expSnapshot);\r\n            if (callback) {\r\n                callback.call(ret.context, result, previousChildName);\r\n            }\r\n            deferred.resolve(result);\r\n        };\r\n        valueCallback.userCallback = callback;\r\n        valueCallback.context = ret.context;\r\n        const cancelCallback = (error) => {\r\n            if (ret.cancel) {\r\n                ret.cancel.call(ret.context, error);\r\n            }\r\n            deferred.reject(error);\r\n        };\r\n        switch (eventType) {\r\n            case 'value':\r\n                onValue(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_added':\r\n                onChildAdded(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_removed':\r\n                onChildRemoved(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_changed':\r\n                onChildChanged(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_moved':\r\n                onChildMoved(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            default:\r\n                throw new Error(errorPrefix('Query.once', 'eventType') +\r\n                    'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                    '\"child_changed\", or \"child_moved\".');\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     */\r\n    limitToFirst(limit) {\r\n        validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, limitToFirst(limit)));\r\n    }\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     */\r\n    limitToLast(limit) {\r\n        validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, limitToLast(limit)));\r\n    }\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     */\r\n    orderByChild(path) {\r\n        validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByChild(path)));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     */\r\n    orderByKey() {\r\n        validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByKey()));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     */\r\n    orderByPriority() {\r\n        validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByPriority()));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     */\r\n    orderByValue() {\r\n        validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByValue()));\r\n    }\r\n    startAt(value = null, name) {\r\n        validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, startAt(value, name)));\r\n    }\r\n    startAfter(value = null, name) {\r\n        validateArgCount('Query.startAfter', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, startAfter(value, name)));\r\n    }\r\n    endAt(value = null, name) {\r\n        validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, endAt(value, name)));\r\n    }\r\n    endBefore(value = null, name) {\r\n        validateArgCount('Query.endBefore', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, endBefore(value, name)));\r\n    }\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     */\r\n    equalTo(value, name) {\r\n        validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, equalTo(value, name)));\r\n    }\r\n    /**\r\n     * @returns URL for this location.\r\n     */\r\n    toString() {\r\n        validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this._delegate.toString();\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    toJSON() {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this._delegate.toJSON();\r\n    }\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     */\r\n    isEqual(other) {\r\n        validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            const error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error);\r\n        }\r\n        return this._delegate.isEqual(other._delegate);\r\n    }\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param fnName - The function name (on or once)\r\n     *\r\n     */\r\n    static getCancelAndContextArgs_(fnName, cancelOrContext, context) {\r\n        const ret = { cancel: undefined, context: undefined };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            validateCallback(fnName, 'cancel', ret.cancel, true);\r\n            ret.context = context;\r\n            validateContextObject(fnName, 'context', ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(errorPrefix(fnName, 'cancelOrContext') +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    get ref() {\r\n        return new Reference(this.database, new _ReferenceImpl(this._delegate._repo, this._delegate._path));\r\n    }\r\n}\r\nclass Reference extends Query {\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     */\r\n    constructor(database, _delegate) {\r\n        super(database, new _QueryImpl(_delegate._repo, _delegate._path, new _QueryParams(), false));\r\n        this.database = database;\r\n        this._delegate = _delegate;\r\n    }\r\n    /** @returns {?string} */\r\n    getKey() {\r\n        validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        return this._delegate.key;\r\n    }\r\n    child(pathString) {\r\n        validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        return new Reference(this.database, child(this._delegate, pathString));\r\n    }\r\n    /** @returns {?Reference} */\r\n    getParent() {\r\n        validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        const parent = this._delegate.parent;\r\n        return parent ? new Reference(this.database, parent) : null;\r\n    }\r\n    /** @returns {!Reference} */\r\n    getRoot() {\r\n        validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        return new Reference(this.database, this._delegate.root);\r\n    }\r\n    set(newVal, onComplete) {\r\n        validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateCallback('Reference.set', 'onComplete', onComplete, true);\r\n        const result = set(this._delegate, newVal);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    update(values, onComplete) {\r\n        validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        if (Array.isArray(values)) {\r\n            const newObjectToMerge = {};\r\n            for (let i = 0; i < values.length; ++i) {\r\n                newObjectToMerge['' + i] = values[i];\r\n            }\r\n            values = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        _validateWritablePath('Reference.update', this._delegate._path);\r\n        validateCallback('Reference.update', 'onComplete', onComplete, true);\r\n        const result = update(this._delegate, values);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    setWithPriority(newVal, newPriority, onComplete) {\r\n        validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateCallback('Reference.setWithPriority', 'onComplete', onComplete, true);\r\n        const result = setWithPriority(this._delegate, newVal, newPriority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    remove(onComplete) {\r\n        validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateCallback('Reference.remove', 'onComplete', onComplete, true);\r\n        const result = remove(this._delegate);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    transaction(transactionUpdate, onComplete, applyLocally) {\r\n        validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateCallback('Reference.transaction', 'transactionUpdate', transactionUpdate, false);\r\n        validateCallback('Reference.transaction', 'onComplete', onComplete, true);\r\n        validateBoolean('Reference.transaction', 'applyLocally', applyLocally, true);\r\n        const result = runTransaction(this._delegate, transactionUpdate, {\r\n            applyLocally\r\n        }).then(transactionResult => new TransactionResult(transactionResult.committed, new DataSnapshot(this.database, transactionResult.snapshot)));\r\n        if (onComplete) {\r\n            result.then(transactionResult => onComplete(null, transactionResult.committed, transactionResult.snapshot), error => onComplete(error, false, null));\r\n        }\r\n        return result;\r\n    }\r\n    setPriority(priority, onComplete) {\r\n        validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\r\n        const result = setPriority(this._delegate, priority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    push(value, onComplete) {\r\n        validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateCallback('Reference.push', 'onComplete', onComplete, true);\r\n        const expPromise = push(this._delegate, value);\r\n        const promise = expPromise.then(expRef => new Reference(this.database, expRef));\r\n        if (onComplete) {\r\n            promise.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        const result = new Reference(this.database, expPromise);\r\n        result.then = promise.then.bind(promise);\r\n        result.catch = promise.catch.bind(promise, undefined);\r\n        return result;\r\n    }\r\n    onDisconnect() {\r\n        _validateWritablePath('Reference.onDisconnect', this._delegate._path);\r\n        return new OnDisconnect(new OnDisconnect$1(this._delegate._repo, this._delegate._path));\r\n    }\r\n    get key() {\r\n        return this.getKey();\r\n    }\r\n    get parent() {\r\n        return this.getParent();\r\n    }\r\n    get root() {\r\n        return this.getRoot();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n */\r\nclass Database {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     */\r\n    constructor(_delegate, app) {\r\n        this._delegate = _delegate;\r\n        this.app = app;\r\n        this.INTERNAL = {\r\n            delete: () => this._delegate._delete()\r\n        };\r\n    }\r\n    /**\r\n     * Modify this instance to communicate with the Realtime Database emulator.\r\n     *\r\n     * <p>Note: This method must be called before performing any other operation.\r\n     *\r\n     * @param host - the emulator host (ex: localhost)\r\n     * @param port - the emulator port (ex: 8080)\r\n     * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n     */\r\n    useEmulator(host, port, options = {}) {\r\n        connectDatabaseEmulator(this._delegate, host, port, options);\r\n    }\r\n    ref(path) {\r\n        validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            const childRef = refFromURL(this._delegate, path.toString());\r\n            return new Reference(this, childRef);\r\n        }\r\n        else {\r\n            const childRef = ref(this._delegate, path);\r\n            return new Reference(this, childRef);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @returns Firebase reference.\r\n     */\r\n    refFromURL(url) {\r\n        const apiName = 'database.refFromURL';\r\n        validateArgCount(apiName, 1, 1, arguments.length);\r\n        const childRef = refFromURL(this._delegate, url);\r\n        return new Reference(this, childRef);\r\n    }\r\n    // Make individual repo go offline.\r\n    goOffline() {\r\n        validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        return goOffline(this._delegate);\r\n    }\r\n    goOnline() {\r\n        validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        return goOnline(this._delegate);\r\n    }\r\n}\r\nDatabase.ServerValue = {\r\n    TIMESTAMP: serverTimestamp(),\r\n    increment: (delta) => increment(delta)\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n *\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAuthImpl - custom auth implementation\r\n */\r\nfunction initStandalone({ app, url, version, customAuthImpl, namespace, nodeAdmin = false }) {\r\n    _setSDKVersion(version);\r\n    /**\r\n     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n     * any actual function.\r\n     */\r\n    const authProvider = new Provider('auth-internal', new ComponentContainer('database-standalone'));\r\n    authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* PRIVATE */));\r\n    return {\r\n        instance: new Database(_repoManagerDatabaseFromApp(app, authProvider, \r\n        /* appCheckProvider= */ undefined, url, nodeAdmin), app),\r\n        namespace\r\n    };\r\n}\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  initStandalone: initStandalone\n});\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    instance.INTERNAL.registerComponent(new Component('database-compat', (container, { instanceIdentifier: url }) => {\r\n        /* Dependencies */\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app-compat').getImmediate();\r\n        const databaseExp = container\r\n            .getProvider('database')\r\n            .getImmediate({ identifier: url });\r\n        return new Database(databaseExp, app);\r\n    }, \"PUBLIC\" /* PUBLIC */)\r\n        .setServiceProps(\r\n    // firebase.database namespace properties\r\n    {\r\n        Reference,\r\n        Query,\r\n        Database,\r\n        DataSnapshot,\r\n        enableLogging,\r\n        INTERNAL,\r\n        ServerValue\r\n    })\r\n        .setMultipleInstances(true));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterDatabase(firebase);\n\nexport { registerDatabase };\n//# sourceMappingURL=index.esm2017.js.map\n","import { getApp, _getProvider, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, createMockUserToken, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\r\n/**\r\n * Domain name for firebase storage.\r\n */\r\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\r\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\r\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\r\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\r\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\r\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\r\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\r\nclass StorageError extends FirebaseError {\r\n    /**\r\n     * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\r\n     *  added to the end of the message.\r\n     * @param message  - Error message.\r\n     */\r\n    constructor(code, message) {\r\n        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\r\n        /**\r\n         * Stores custom error data unque to StorageError.\r\n         */\r\n        this.customData = { serverResponse: null };\r\n        this._baseMessage = this.message;\r\n        // Without this, `instanceof StorageError`, in tests for example,\r\n        // returns false.\r\n        Object.setPrototypeOf(this, StorageError.prototype);\r\n    }\r\n    /**\r\n     * Compares a StorageErrorCode against this error's code, filtering out the prefix.\r\n     */\r\n    _codeEquals(code) {\r\n        return prependCode(code) === this.code;\r\n    }\r\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\r\n    get serverResponse() {\r\n        return this.customData.serverResponse;\r\n    }\r\n    set serverResponse(serverResponse) {\r\n        this.customData.serverResponse = serverResponse;\r\n        if (this.customData.serverResponse) {\r\n            this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\r\n        }\r\n        else {\r\n            this.message = this._baseMessage;\r\n        }\r\n    }\r\n}\r\nfunction prependCode(code) {\r\n    return 'storage/' + code;\r\n}\r\nfunction unknown() {\r\n    const message = 'An unknown error occurred, please check the error payload for ' +\r\n        'server response.';\r\n    return new StorageError(\"unknown\" /* UNKNOWN */, message);\r\n}\r\nfunction objectNotFound(path) {\r\n    return new StorageError(\"object-not-found\" /* OBJECT_NOT_FOUND */, \"Object '\" + path + \"' does not exist.\");\r\n}\r\nfunction quotaExceeded(bucket) {\r\n    return new StorageError(\"quota-exceeded\" /* QUOTA_EXCEEDED */, \"Quota for bucket '\" +\r\n        bucket +\r\n        \"' exceeded, please view quota on \" +\r\n        'https://firebase.google.com/pricing/.');\r\n}\r\nfunction unauthenticated() {\r\n    const message = 'User is not authenticated, please authenticate using Firebase ' +\r\n        'Authentication and try again.';\r\n    return new StorageError(\"unauthenticated\" /* UNAUTHENTICATED */, message);\r\n}\r\nfunction unauthorizedApp() {\r\n    return new StorageError(\"unauthorized-app\" /* UNAUTHORIZED_APP */, 'This app does not have permission to access Firebase Storage on this project.');\r\n}\r\nfunction unauthorized(path) {\r\n    return new StorageError(\"unauthorized\" /* UNAUTHORIZED */, \"User does not have permission to access '\" + path + \"'.\");\r\n}\r\nfunction retryLimitExceeded() {\r\n    return new StorageError(\"retry-limit-exceeded\" /* RETRY_LIMIT_EXCEEDED */, 'Max retry time for operation exceeded, please try again.');\r\n}\r\nfunction canceled() {\r\n    return new StorageError(\"canceled\" /* CANCELED */, 'User canceled the upload/download.');\r\n}\r\nfunction invalidUrl(url) {\r\n    return new StorageError(\"invalid-url\" /* INVALID_URL */, \"Invalid URL '\" + url + \"'.\");\r\n}\r\nfunction invalidDefaultBucket(bucket) {\r\n    return new StorageError(\"invalid-default-bucket\" /* INVALID_DEFAULT_BUCKET */, \"Invalid default bucket '\" + bucket + \"'.\");\r\n}\r\nfunction noDefaultBucket() {\r\n    return new StorageError(\"no-default-bucket\" /* NO_DEFAULT_BUCKET */, 'No default bucket ' +\r\n        \"found. Did you set the '\" +\r\n        CONFIG_STORAGE_BUCKET_KEY +\r\n        \"' property when initializing the app?\");\r\n}\r\nfunction cannotSliceBlob() {\r\n    return new StorageError(\"cannot-slice-blob\" /* CANNOT_SLICE_BLOB */, 'Cannot slice blob for upload. Please retry the upload.');\r\n}\r\nfunction serverFileWrongSize() {\r\n    return new StorageError(\"server-file-wrong-size\" /* SERVER_FILE_WRONG_SIZE */, 'Server recorded incorrect upload file size, please retry the upload.');\r\n}\r\nfunction noDownloadURL() {\r\n    return new StorageError(\"no-download-url\" /* NO_DOWNLOAD_URL */, 'The given file does not have any download URLs.');\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction invalidArgument(message) {\r\n    return new StorageError(\"invalid-argument\" /* INVALID_ARGUMENT */, message);\r\n}\r\nfunction appDeleted() {\r\n    return new StorageError(\"app-deleted\" /* APP_DELETED */, 'The Firebase app was deleted.');\r\n}\r\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\r\nfunction invalidRootOperation(name) {\r\n    return new StorageError(\"invalid-root-operation\" /* INVALID_ROOT_OPERATION */, \"The operation '\" +\r\n        name +\r\n        \"' cannot be performed on a root reference, create a non-root \" +\r\n        \"reference using child, such as .child('file.png').\");\r\n}\r\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\r\nfunction invalidFormat(format, message) {\r\n    return new StorageError(\"invalid-format\" /* INVALID_FORMAT */, \"String does not match format '\" + format + \"': \" + message);\r\n}\r\n/**\r\n * @param message - A message describing the internal error.\r\n */\r\nfunction internalError(message) {\r\n    throw new StorageError(\"internal-error\" /* INTERNAL_ERROR */, 'Internal error: ' + message);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\r\nclass Location {\r\n    constructor(bucket, path) {\r\n        this.bucket = bucket;\r\n        this.path_ = path;\r\n    }\r\n    get path() {\r\n        return this.path_;\r\n    }\r\n    get isRoot() {\r\n        return this.path.length === 0;\r\n    }\r\n    fullServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\r\n    }\r\n    bucketOnlyServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o';\r\n    }\r\n    static makeFromBucketSpec(bucketString, host) {\r\n        let bucketLocation;\r\n        try {\r\n            bucketLocation = Location.makeFromUrl(bucketString, host);\r\n        }\r\n        catch (e) {\r\n            // Not valid URL, use as-is. This lets you put bare bucket names in\r\n            // config.\r\n            return new Location(bucketString, '');\r\n        }\r\n        if (bucketLocation.path === '') {\r\n            return bucketLocation;\r\n        }\r\n        else {\r\n            throw invalidDefaultBucket(bucketString);\r\n        }\r\n    }\r\n    static makeFromUrl(url, host) {\r\n        let location = null;\r\n        const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\r\n        function gsModify(loc) {\r\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\r\n                loc.path_ = loc.path_.slice(0, -1);\r\n            }\r\n        }\r\n        const gsPath = '(/(.*))?$';\r\n        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\r\n        const gsIndices = { bucket: 1, path: 3 };\r\n        function httpModify(loc) {\r\n            loc.path_ = decodeURIComponent(loc.path);\r\n        }\r\n        const version = 'v[A-Za-z0-9_]+';\r\n        const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\r\n        const firebaseStoragePath = '(/([^?#]*).*)?$';\r\n        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\r\n        const firebaseStorageIndices = { bucket: 1, path: 3 };\r\n        const cloudStorageHost = host === DEFAULT_HOST\r\n            ? '(?:storage.googleapis.com|storage.cloud.google.com)'\r\n            : host;\r\n        const cloudStoragePath = '([^?#]*)';\r\n        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\r\n        const cloudStorageIndices = { bucket: 1, path: 2 };\r\n        const groups = [\r\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\r\n            {\r\n                regex: firebaseStorageRegExp,\r\n                indices: firebaseStorageIndices,\r\n                postModify: httpModify\r\n            },\r\n            {\r\n                regex: cloudStorageRegExp,\r\n                indices: cloudStorageIndices,\r\n                postModify: httpModify\r\n            }\r\n        ];\r\n        for (let i = 0; i < groups.length; i++) {\r\n            const group = groups[i];\r\n            const captures = group.regex.exec(url);\r\n            if (captures) {\r\n                const bucketValue = captures[group.indices.bucket];\r\n                let pathValue = captures[group.indices.path];\r\n                if (!pathValue) {\r\n                    pathValue = '';\r\n                }\r\n                location = new Location(bucketValue, pathValue);\r\n                group.postModify(location);\r\n                break;\r\n            }\r\n        }\r\n        if (location == null) {\r\n            throw invalidUrl(url);\r\n        }\r\n        return location;\r\n    }\r\n}\n\n/**\r\n * A request whose promise always fails.\r\n */\r\nclass FailRequest {\r\n    constructor(error) {\r\n        this.promise_ = Promise.reject(error);\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(_appDelete = false) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\r\nfunction start(f, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ncallback, timeout) {\r\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\r\n    // type instead of a bunch of functions with state shared in the closure)\r\n    let waitSeconds = 1;\r\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\r\n    // TODO: find a way to exclude Node type definition for storage because storage only works in browser\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let retryTimeoutId = null;\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let globalTimeoutId = null;\r\n    let hitTimeout = false;\r\n    let cancelState = 0;\r\n    function canceled() {\r\n        return cancelState === 2;\r\n    }\r\n    let triggeredCallback = false;\r\n    function triggerCallback(...args) {\r\n        if (!triggeredCallback) {\r\n            triggeredCallback = true;\r\n            callback.apply(null, args);\r\n        }\r\n    }\r\n    function callWithDelay(millis) {\r\n        retryTimeoutId = setTimeout(() => {\r\n            retryTimeoutId = null;\r\n            f(handler, canceled());\r\n        }, millis);\r\n    }\r\n    function clearGlobalTimeout() {\r\n        if (globalTimeoutId) {\r\n            clearTimeout(globalTimeoutId);\r\n        }\r\n    }\r\n    function handler(success, ...args) {\r\n        if (triggeredCallback) {\r\n            clearGlobalTimeout();\r\n            return;\r\n        }\r\n        if (success) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        const mustStop = canceled() || hitTimeout;\r\n        if (mustStop) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        if (waitSeconds < 64) {\r\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\r\n            waitSeconds *= 2;\r\n        }\r\n        let waitMillis;\r\n        if (cancelState === 1) {\r\n            cancelState = 2;\r\n            waitMillis = 0;\r\n        }\r\n        else {\r\n            waitMillis = (waitSeconds + Math.random()) * 1000;\r\n        }\r\n        callWithDelay(waitMillis);\r\n    }\r\n    let stopped = false;\r\n    function stop(wasTimeout) {\r\n        if (stopped) {\r\n            return;\r\n        }\r\n        stopped = true;\r\n        clearGlobalTimeout();\r\n        if (triggeredCallback) {\r\n            return;\r\n        }\r\n        if (retryTimeoutId !== null) {\r\n            if (!wasTimeout) {\r\n                cancelState = 2;\r\n            }\r\n            clearTimeout(retryTimeoutId);\r\n            callWithDelay(0);\r\n        }\r\n        else {\r\n            if (!wasTimeout) {\r\n                cancelState = 1;\r\n            }\r\n        }\r\n    }\r\n    callWithDelay(0);\r\n    globalTimeoutId = setTimeout(() => {\r\n        hitTimeout = true;\r\n        stop(true);\r\n    }, timeout);\r\n    return stop;\r\n}\r\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\r\nfunction stop(id) {\r\n    id(false);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isJustDef(p) {\r\n    return p !== void 0;\r\n}\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction isFunction(p) {\r\n    return typeof p === 'function';\r\n}\r\nfunction isNonArrayObject(p) {\r\n    return typeof p === 'object' && !Array.isArray(p);\r\n}\r\nfunction isString(p) {\r\n    return typeof p === 'string' || p instanceof String;\r\n}\r\nfunction isNativeBlob(p) {\r\n    return isNativeBlobDefined() && p instanceof Blob;\r\n}\r\nfunction isNativeBlobDefined() {\r\n    return typeof Blob !== 'undefined';\r\n}\r\nfunction validateNumber(argument, minValue, maxValue, value) {\r\n    if (value < minValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\r\n    }\r\n    if (value > maxValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction makeUrl(urlPart, host, protocol) {\r\n    let origin = host;\r\n    if (protocol == null) {\r\n        origin = `https://${host}`;\r\n    }\r\n    return `${protocol}://${origin}/v0${urlPart}`;\r\n}\r\nfunction makeQueryString(params) {\r\n    const encode = encodeURIComponent;\r\n    let queryPart = '?';\r\n    for (const key in params) {\r\n        if (params.hasOwnProperty(key)) {\r\n            const nextPart = encode(key) + '=' + encode(params[key]);\r\n            queryPart = queryPart + nextPart + '&';\r\n        }\r\n    }\r\n    // Chop off the extra '&' or '?' on the end\r\n    queryPart = queryPart.slice(0, -1);\r\n    return queryPart;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\r\nvar ErrorCode;\r\n(function (ErrorCode) {\r\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\r\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\r\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\r\nclass NetworkRequest {\r\n    constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_) {\r\n        this.url_ = url_;\r\n        this.method_ = method_;\r\n        this.headers_ = headers_;\r\n        this.body_ = body_;\r\n        this.successCodes_ = successCodes_;\r\n        this.additionalRetryCodes_ = additionalRetryCodes_;\r\n        this.callback_ = callback_;\r\n        this.errorCallback_ = errorCallback_;\r\n        this.timeout_ = timeout_;\r\n        this.progressCallback_ = progressCallback_;\r\n        this.connectionFactory_ = connectionFactory_;\r\n        this.pendingConnection_ = null;\r\n        this.backoffId_ = null;\r\n        this.canceled_ = false;\r\n        this.appDelete_ = false;\r\n        this.promise_ = new Promise((resolve, reject) => {\r\n            this.resolve_ = resolve;\r\n            this.reject_ = reject;\r\n            this.start_();\r\n        });\r\n    }\r\n    /**\r\n     * Actually starts the retry loop.\r\n     */\r\n    start_() {\r\n        const doTheRequest = (backoffCallback, canceled) => {\r\n            if (canceled) {\r\n                backoffCallback(false, new RequestEndStatus(false, null, true));\r\n                return;\r\n            }\r\n            const connection = this.connectionFactory_();\r\n            this.pendingConnection_ = connection;\r\n            const progressListener = progressEvent => {\r\n                const loaded = progressEvent.loaded;\r\n                const total = progressEvent.lengthComputable\r\n                    ? progressEvent.total\r\n                    : -1;\r\n                if (this.progressCallback_ !== null) {\r\n                    this.progressCallback_(loaded, total);\r\n                }\r\n            };\r\n            if (this.progressCallback_ !== null) {\r\n                connection.addUploadProgressListener(progressListener);\r\n            }\r\n            // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            connection\r\n                .send(this.url_, this.method_, this.body_, this.headers_)\r\n                .then(() => {\r\n                if (this.progressCallback_ !== null) {\r\n                    connection.removeUploadProgressListener(progressListener);\r\n                }\r\n                this.pendingConnection_ = null;\r\n                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\r\n                const status = connection.getStatus();\r\n                if (!hitServer || this.isRetryStatusCode_(status)) {\r\n                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\r\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\r\n                    return;\r\n                }\r\n                const successCode = this.successCodes_.indexOf(status) !== -1;\r\n                backoffCallback(true, new RequestEndStatus(successCode, connection));\r\n            });\r\n        };\r\n        /**\r\n         * @param requestWentThrough - True if the request eventually went\r\n         *     through, false if it hit the retry limit or was canceled.\r\n         */\r\n        const backoffDone = (requestWentThrough, status) => {\r\n            const resolve = this.resolve_;\r\n            const reject = this.reject_;\r\n            const connection = status.connection;\r\n            if (status.wasSuccessCode) {\r\n                try {\r\n                    const result = this.callback_(connection, connection.getResponse());\r\n                    if (isJustDef(result)) {\r\n                        resolve(result);\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n            else {\r\n                if (connection !== null) {\r\n                    const err = unknown();\r\n                    err.serverResponse = connection.getErrorText();\r\n                    if (this.errorCallback_) {\r\n                        reject(this.errorCallback_(connection, err));\r\n                    }\r\n                    else {\r\n                        reject(err);\r\n                    }\r\n                }\r\n                else {\r\n                    if (status.canceled) {\r\n                        const err = this.appDelete_ ? appDeleted() : canceled();\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        const err = retryLimitExceeded();\r\n                        reject(err);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        if (this.canceled_) {\r\n            backoffDone(false, new RequestEndStatus(false, null, true));\r\n        }\r\n        else {\r\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(appDelete) {\r\n        this.canceled_ = true;\r\n        this.appDelete_ = appDelete || false;\r\n        if (this.backoffId_ !== null) {\r\n            stop(this.backoffId_);\r\n        }\r\n        if (this.pendingConnection_ !== null) {\r\n            this.pendingConnection_.abort();\r\n        }\r\n    }\r\n    isRetryStatusCode_(status) {\r\n        // The codes for which to retry came from this page:\r\n        // https://cloud.google.com/storage/docs/exponential-backoff\r\n        const isFiveHundredCode = status >= 500 && status < 600;\r\n        const extraRetryCodes = [\r\n            // Request Timeout: web server didn't receive full request in time.\r\n            408,\r\n            // Too Many Requests: you're getting rate-limited, basically.\r\n            429\r\n        ];\r\n        const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\r\n        const isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\r\n        return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\r\n    }\r\n}\r\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\r\nclass RequestEndStatus {\r\n    constructor(wasSuccessCode, connection, canceled) {\r\n        this.wasSuccessCode = wasSuccessCode;\r\n        this.connection = connection;\r\n        this.canceled = !!canceled;\r\n    }\r\n}\r\nfunction addAuthHeader_(headers, authToken) {\r\n    if (authToken !== null && authToken.length > 0) {\r\n        headers['Authorization'] = 'Firebase ' + authToken;\r\n    }\r\n}\r\nfunction addVersionHeader_(headers, firebaseVersion) {\r\n    headers['X-Firebase-Storage-Version'] =\r\n        'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\r\n}\r\nfunction addGmpidHeader_(headers, appId) {\r\n    if (appId) {\r\n        headers['X-Firebase-GMPID'] = appId;\r\n    }\r\n}\r\nfunction addAppCheckHeader_(headers, appCheckToken) {\r\n    if (appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = appCheckToken;\r\n    }\r\n}\r\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion) {\r\n    const queryPart = makeQueryString(requestInfo.urlParams);\r\n    const url = requestInfo.url + queryPart;\r\n    const headers = Object.assign({}, requestInfo.headers);\r\n    addGmpidHeader_(headers, appId);\r\n    addAuthHeader_(headers, authToken);\r\n    addVersionHeader_(headers, firebaseVersion);\r\n    addAppCheckHeader_(headers, appCheckToken);\r\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getBlobBuilder() {\r\n    if (typeof BlobBuilder !== 'undefined') {\r\n        return BlobBuilder;\r\n    }\r\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\r\n        return WebKitBlobBuilder;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\r\nfunction getBlob$1(...args) {\r\n    const BlobBuilder = getBlobBuilder();\r\n    if (BlobBuilder !== undefined) {\r\n        const bb = new BlobBuilder();\r\n        for (let i = 0; i < args.length; i++) {\r\n            bb.append(args[i]);\r\n        }\r\n        return bb.getBlob();\r\n    }\r\n    else {\r\n        if (isNativeBlobDefined()) {\r\n            return new Blob(args);\r\n        }\r\n        else {\r\n            throw new StorageError(\"unsupported-environment\" /* UNSUPPORTED_ENVIRONMENT */, \"This browser doesn't seem to support creating Blobs\");\r\n        }\r\n    }\r\n}\r\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\r\nfunction sliceBlob(blob, start, end) {\r\n    if (blob.webkitSlice) {\r\n        return blob.webkitSlice(start, end);\r\n    }\r\n    else if (blob.mozSlice) {\r\n        return blob.mozSlice(start, end);\r\n    }\r\n    else if (blob.slice) {\r\n        return blob.slice(start, end);\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Converts a Base64 encoded string to a binary string. */\r\nfunction decodeBase64(encoded) {\r\n    return atob(encoded);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\r\nconst StringFormat = {\r\n    /**\r\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n     * sequence.\r\n     * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n     */\r\n    RAW: 'raw',\r\n    /**\r\n     * Indicates the string should be interpreted as base64-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64: 'base64',\r\n    /**\r\n     * Indicates the string should be interpreted as base64url-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64URL: 'base64url',\r\n    /**\r\n     * Indicates the string is a data URL, such as one obtained from\r\n     * canvas.toDataURL().\r\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n     * becomes the byte sequence\r\n     * 69 a6 9a\r\n     * (the content-type \"application/octet-stream\" is also applied, but can\r\n     * be overridden in the metadata object).\r\n     */\r\n    DATA_URL: 'data_url'\r\n};\r\nclass StringData {\r\n    constructor(data, contentType) {\r\n        this.data = data;\r\n        this.contentType = contentType || null;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction dataFromString(format, stringData) {\r\n    switch (format) {\r\n        case StringFormat.RAW:\r\n            return new StringData(utf8Bytes_(stringData));\r\n        case StringFormat.BASE64:\r\n        case StringFormat.BASE64URL:\r\n            return new StringData(base64Bytes_(format, stringData));\r\n        case StringFormat.DATA_URL:\r\n            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\r\n        // do nothing\r\n    }\r\n    // assert(false);\r\n    throw unknown();\r\n}\r\nfunction utf8Bytes_(value) {\r\n    const b = [];\r\n    for (let i = 0; i < value.length; i++) {\r\n        let c = value.charCodeAt(i);\r\n        if (c <= 127) {\r\n            b.push(c);\r\n        }\r\n        else {\r\n            if (c <= 2047) {\r\n                b.push(192 | (c >> 6), 128 | (c & 63));\r\n            }\r\n            else {\r\n                if ((c & 64512) === 55296) {\r\n                    // The start of a surrogate pair.\r\n                    const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\r\n                    if (!valid) {\r\n                        // The second surrogate wasn't there.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        const hi = c;\r\n                        const lo = value.charCodeAt(++i);\r\n                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\r\n                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n                else {\r\n                    if ((c & 64512) === 56320) {\r\n                        // Invalid low surrogate.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Uint8Array(b);\r\n}\r\nfunction percentEncodedBytes_(value) {\r\n    let decoded;\r\n    try {\r\n        decoded = decodeURIComponent(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\r\n    }\r\n    return utf8Bytes_(decoded);\r\n}\r\nfunction base64Bytes_(format, value) {\r\n    switch (format) {\r\n        case StringFormat.BASE64: {\r\n            const hasMinus = value.indexOf('-') !== -1;\r\n            const hasUnder = value.indexOf('_') !== -1;\r\n            if (hasMinus || hasUnder) {\r\n                const invalidChar = hasMinus ? '-' : '_';\r\n                throw invalidFormat(format, \"Invalid character '\" +\r\n                    invalidChar +\r\n                    \"' found: is it base64url encoded?\");\r\n            }\r\n            break;\r\n        }\r\n        case StringFormat.BASE64URL: {\r\n            const hasPlus = value.indexOf('+') !== -1;\r\n            const hasSlash = value.indexOf('/') !== -1;\r\n            if (hasPlus || hasSlash) {\r\n                const invalidChar = hasPlus ? '+' : '/';\r\n                throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\r\n            }\r\n            value = value.replace(/-/g, '+').replace(/_/g, '/');\r\n            break;\r\n        }\r\n        // do nothing\r\n    }\r\n    let bytes;\r\n    try {\r\n        bytes = decodeBase64(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(format, 'Invalid character found');\r\n    }\r\n    const array = new Uint8Array(bytes.length);\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        array[i] = bytes.charCodeAt(i);\r\n    }\r\n    return array;\r\n}\r\nclass DataURLParts {\r\n    constructor(dataURL) {\r\n        this.base64 = false;\r\n        this.contentType = null;\r\n        const matches = dataURL.match(/^data:([^,]+)?,/);\r\n        if (matches === null) {\r\n            throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\r\n        }\r\n        const middle = matches[1] || null;\r\n        if (middle != null) {\r\n            this.base64 = endsWith(middle, ';base64');\r\n            this.contentType = this.base64\r\n                ? middle.substring(0, middle.length - ';base64'.length)\r\n                : middle;\r\n        }\r\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\r\n    }\r\n}\r\nfunction dataURLBytes_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    if (parts.base64) {\r\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\r\n    }\r\n    else {\r\n        return percentEncodedBytes_(parts.rest);\r\n    }\r\n}\r\nfunction dataURLContentType_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    return parts.contentType;\r\n}\r\nfunction endsWith(s, end) {\r\n    const longEnough = s.length >= end.length;\r\n    if (!longEnough) {\r\n        return false;\r\n    }\r\n    return s.substring(s.length - end.length) === end;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\r\nclass FbsBlob {\r\n    constructor(data, elideCopy) {\r\n        let size = 0;\r\n        let blobType = '';\r\n        if (isNativeBlob(data)) {\r\n            this.data_ = data;\r\n            size = data.size;\r\n            blobType = data.type;\r\n        }\r\n        else if (data instanceof ArrayBuffer) {\r\n            if (elideCopy) {\r\n                this.data_ = new Uint8Array(data);\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.byteLength);\r\n                this.data_.set(new Uint8Array(data));\r\n            }\r\n            size = this.data_.length;\r\n        }\r\n        else if (data instanceof Uint8Array) {\r\n            if (elideCopy) {\r\n                this.data_ = data;\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.length);\r\n                this.data_.set(data);\r\n            }\r\n            size = data.length;\r\n        }\r\n        this.size_ = size;\r\n        this.type_ = blobType;\r\n    }\r\n    size() {\r\n        return this.size_;\r\n    }\r\n    type() {\r\n        return this.type_;\r\n    }\r\n    slice(startByte, endByte) {\r\n        if (isNativeBlob(this.data_)) {\r\n            const realBlob = this.data_;\r\n            const sliced = sliceBlob(realBlob, startByte, endByte);\r\n            if (sliced === null) {\r\n                return null;\r\n            }\r\n            return new FbsBlob(sliced);\r\n        }\r\n        else {\r\n            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\r\n            return new FbsBlob(slice, true);\r\n        }\r\n    }\r\n    static getBlob(...args) {\r\n        if (isNativeBlobDefined()) {\r\n            const blobby = args.map((val) => {\r\n                if (val instanceof FbsBlob) {\r\n                    return val.data_;\r\n                }\r\n                else {\r\n                    return val;\r\n                }\r\n            });\r\n            return new FbsBlob(getBlob$1.apply(null, blobby));\r\n        }\r\n        else {\r\n            const uint8Arrays = args.map((val) => {\r\n                if (isString(val)) {\r\n                    return dataFromString(StringFormat.RAW, val).data;\r\n                }\r\n                else {\r\n                    // Blobs don't exist, so this has to be a Uint8Array.\r\n                    return val.data_;\r\n                }\r\n            });\r\n            let finalLength = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                finalLength += array.byteLength;\r\n            });\r\n            const merged = new Uint8Array(finalLength);\r\n            let index = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                for (let i = 0; i < array.length; i++) {\r\n                    merged[index++] = array[i];\r\n                }\r\n            });\r\n            return new FbsBlob(merged, true);\r\n        }\r\n    }\r\n    uploadData() {\r\n        return this.data_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\r\nfunction jsonObjectOrNull(s) {\r\n    let obj;\r\n    try {\r\n        obj = JSON.parse(s);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n    if (isNonArrayObject(obj)) {\r\n        return obj;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\r\n/**\r\n * @return Null if the path is already at the root.\r\n */\r\nfunction parent(path) {\r\n    if (path.length === 0) {\r\n        return null;\r\n    }\r\n    const index = path.lastIndexOf('/');\r\n    if (index === -1) {\r\n        return '';\r\n    }\r\n    const newPath = path.slice(0, index);\r\n    return newPath;\r\n}\r\nfunction child(path, childPath) {\r\n    const canonicalChildPath = childPath\r\n        .split('/')\r\n        .filter(component => component.length > 0)\r\n        .join('/');\r\n    if (path.length === 0) {\r\n        return canonicalChildPath;\r\n    }\r\n    else {\r\n        return path + '/' + canonicalChildPath;\r\n    }\r\n}\r\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\r\nfunction lastComponent(path) {\r\n    const index = path.lastIndexOf('/', path.length - 2);\r\n    if (index === -1) {\r\n        return path;\r\n    }\r\n    else {\r\n        return path.slice(index + 1);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction noXform_(metadata, value) {\r\n    return value;\r\n}\r\nclass Mapping {\r\n    constructor(server, local, writable, xform) {\r\n        this.server = server;\r\n        this.local = local || server;\r\n        this.writable = !!writable;\r\n        this.xform = xform || noXform_;\r\n    }\r\n}\r\nlet mappings_ = null;\r\nfunction xformPath(fullPath) {\r\n    if (!isString(fullPath) || fullPath.length < 2) {\r\n        return fullPath;\r\n    }\r\n    else {\r\n        return lastComponent(fullPath);\r\n    }\r\n}\r\nfunction getMappings() {\r\n    if (mappings_) {\r\n        return mappings_;\r\n    }\r\n    const mappings = [];\r\n    mappings.push(new Mapping('bucket'));\r\n    mappings.push(new Mapping('generation'));\r\n    mappings.push(new Mapping('metageneration'));\r\n    mappings.push(new Mapping('name', 'fullPath', true));\r\n    function mappingsXformPath(_metadata, fullPath) {\r\n        return xformPath(fullPath);\r\n    }\r\n    const nameMapping = new Mapping('name');\r\n    nameMapping.xform = mappingsXformPath;\r\n    mappings.push(nameMapping);\r\n    /**\r\n     * Coerces the second param to a number, if it is defined.\r\n     */\r\n    function xformSize(_metadata, size) {\r\n        if (size !== undefined) {\r\n            return Number(size);\r\n        }\r\n        else {\r\n            return size;\r\n        }\r\n    }\r\n    const sizeMapping = new Mapping('size');\r\n    sizeMapping.xform = xformSize;\r\n    mappings.push(sizeMapping);\r\n    mappings.push(new Mapping('timeCreated'));\r\n    mappings.push(new Mapping('updated'));\r\n    mappings.push(new Mapping('md5Hash', null, true));\r\n    mappings.push(new Mapping('cacheControl', null, true));\r\n    mappings.push(new Mapping('contentDisposition', null, true));\r\n    mappings.push(new Mapping('contentEncoding', null, true));\r\n    mappings.push(new Mapping('contentLanguage', null, true));\r\n    mappings.push(new Mapping('contentType', null, true));\r\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\r\n    mappings_ = mappings;\r\n    return mappings_;\r\n}\r\nfunction addRef(metadata, service) {\r\n    function generateRef() {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const loc = new Location(bucket, path);\r\n        return service._makeStorageReference(loc);\r\n    }\r\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\r\n}\r\nfunction fromResource(service, resource, mappings) {\r\n    const metadata = {};\r\n    metadata['type'] = 'file';\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\r\n    }\r\n    addRef(metadata, service);\r\n    return metadata;\r\n}\r\nfunction fromResourceString(service, resourceString, mappings) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromResource(service, resource, mappings);\r\n}\r\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    if (!isString(obj['downloadTokens'])) {\r\n        // This can happen if objects are uploaded through GCS and retrieved\r\n        // through list, so we don't want to throw an Error.\r\n        return null;\r\n    }\r\n    const tokens = obj['downloadTokens'];\r\n    if (tokens.length === 0) {\r\n        return null;\r\n    }\r\n    const encode = encodeURIComponent;\r\n    const tokensList = tokens.split(',');\r\n    const urls = tokensList.map((token) => {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\r\n        const base = makeUrl(urlPart, host, protocol);\r\n        const queryString = makeQueryString({\r\n            alt: 'media',\r\n            token\r\n        });\r\n        return base + queryString;\r\n    });\r\n    return urls[0];\r\n}\r\nfunction toResourceString(metadata, mappings) {\r\n    const resource = {};\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        if (mapping.writable) {\r\n            resource[mapping.server] = metadata[mapping.local];\r\n        }\r\n    }\r\n    return JSON.stringify(resource);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PREFIXES_KEY = 'prefixes';\r\nconst ITEMS_KEY = 'items';\r\nfunction fromBackendResponse(service, bucket, resource) {\r\n    const listResult = {\r\n        prefixes: [],\r\n        items: [],\r\n        nextPageToken: resource['nextPageToken']\r\n    };\r\n    if (resource[PREFIXES_KEY]) {\r\n        for (const path of resource[PREFIXES_KEY]) {\r\n            const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\r\n            const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\r\n            listResult.prefixes.push(reference);\r\n        }\r\n    }\r\n    if (resource[ITEMS_KEY]) {\r\n        for (const item of resource[ITEMS_KEY]) {\r\n            const reference = service._makeStorageReference(new Location(bucket, item['name']));\r\n            listResult.items.push(reference);\r\n        }\r\n    }\r\n    return listResult;\r\n}\r\nfunction fromResponseString(service, bucket, resourceString) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromBackendResponse(service, bucket, resource);\r\n}\n\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\r\nclass RequestInfo {\r\n    constructor(url, method, \r\n    /**\r\n     * Returns the value with which to resolve the request's promise. Only called\r\n     * if the request is successful. Throw from this function to reject the\r\n     * returned Request's promise with the thrown error.\r\n     * Note: The XhrIo passed to this function may be reused after this callback\r\n     * returns. Do not keep a reference to it in any way.\r\n     */\r\n    handler, timeout) {\r\n        this.url = url;\r\n        this.method = method;\r\n        this.handler = handler;\r\n        this.timeout = timeout;\r\n        this.urlParams = {};\r\n        this.headers = {};\r\n        this.body = null;\r\n        this.errorHandler = null;\r\n        /**\r\n         * Called with the current number of bytes uploaded and total size (-1 if not\r\n         * computable) of the request body (i.e. used to report upload progress).\r\n         */\r\n        this.progressCallback = null;\r\n        this.successCodes = [200];\r\n        this.additionalRetryCodes = [];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\r\nfunction handlerCheck(cndn) {\r\n    if (!cndn) {\r\n        throw unknown();\r\n    }\r\n}\r\nfunction metadataHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return metadata;\r\n    }\r\n    return handler;\r\n}\r\nfunction listHandler(service, bucket) {\r\n    function handler(xhr, text) {\r\n        const listResult = fromResponseString(service, bucket, text);\r\n        handlerCheck(listResult !== null);\r\n        return listResult;\r\n    }\r\n    return handler;\r\n}\r\nfunction downloadUrlHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\r\n    }\r\n    return handler;\r\n}\r\nfunction sharedErrorHandler(location) {\r\n    function errorHandler(xhr, err) {\r\n        let newErr;\r\n        if (xhr.getStatus() === 401) {\r\n            if (\r\n            // This exact message string is the only consistent part of the\r\n            // server's error response that identifies it as an App Check error.\r\n            xhr.getErrorText().includes('Firebase App Check token is invalid')) {\r\n                newErr = unauthorizedApp();\r\n            }\r\n            else {\r\n                newErr = unauthenticated();\r\n            }\r\n        }\r\n        else {\r\n            if (xhr.getStatus() === 402) {\r\n                newErr = quotaExceeded(location.bucket);\r\n            }\r\n            else {\r\n                if (xhr.getStatus() === 403) {\r\n                    newErr = unauthorized(location.path);\r\n                }\r\n                else {\r\n                    newErr = err;\r\n                }\r\n            }\r\n        }\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction objectErrorHandler(location) {\r\n    const shared = sharedErrorHandler(location);\r\n    function errorHandler(xhr, err) {\r\n        let newErr = shared(xhr, err);\r\n        if (xhr.getStatus() === 404) {\r\n            newErr = objectNotFound(location.path);\r\n        }\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction getMetadata$2(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\r\n    const urlParams = {};\r\n    if (location.isRoot) {\r\n        urlParams['prefix'] = '';\r\n    }\r\n    else {\r\n        urlParams['prefix'] = location.path + '/';\r\n    }\r\n    if (delimiter && delimiter.length > 0) {\r\n        urlParams['delimiter'] = delimiter;\r\n    }\r\n    if (pageToken) {\r\n        urlParams['pageToken'] = pageToken;\r\n    }\r\n    if (maxResults) {\r\n        urlParams['maxResults'] = maxResults;\r\n    }\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    if (maxDownloadSizeBytes !== undefined) {\r\n        requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\r\n        requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\r\n    }\r\n    return requestInfo;\r\n}\r\nfunction getDownloadUrl(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction updateMetadata$2(service, location, metadata, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'PATCH';\r\n    const body = toResourceString(metadata, mappings);\r\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction deleteObject$2(service, location) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'DELETE';\r\n    const timeout = service.maxOperationRetryTime;\r\n    function handler(_xhr, _text) { }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.successCodes = [200, 204];\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction determineContentType_(metadata, blob) {\r\n    return ((metadata && metadata['contentType']) ||\r\n        (blob && blob.type()) ||\r\n        'application/octet-stream');\r\n}\r\nfunction metadataForUpload_(location, blob, metadata) {\r\n    const metadataClone = Object.assign({}, metadata);\r\n    metadataClone['fullPath'] = location.path;\r\n    metadataClone['size'] = blob.size();\r\n    if (!metadataClone['contentType']) {\r\n        metadataClone['contentType'] = determineContentType_(null, blob);\r\n    }\r\n    return metadataClone;\r\n}\r\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\r\nfunction multipartUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'multipart'\r\n    };\r\n    function genBoundary() {\r\n        let str = '';\r\n        for (let i = 0; i < 2; i++) {\r\n            str = str + Math.random().toString().slice(2);\r\n        }\r\n        return str;\r\n    }\r\n    const boundary = genBoundary();\r\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\r\n    const metadata_ = metadataForUpload_(location, blob, metadata);\r\n    const metadataString = toResourceString(metadata_, mappings);\r\n    const preBlobPart = '--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\r\n        metadataString +\r\n        '\\r\\n--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: ' +\r\n        metadata_['contentType'] +\r\n        '\\r\\n\\r\\n';\r\n    const postBlobPart = '\\r\\n--' + boundary + '--';\r\n    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    const urlParams = { name: metadata_['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\r\nclass ResumableUploadStatus {\r\n    constructor(current, total, finalized, metadata) {\r\n        this.current = current;\r\n        this.total = total;\r\n        this.finalized = !!finalized;\r\n        this.metadata = metadata || null;\r\n    }\r\n}\r\nfunction checkResumeHeader_(xhr, allowed) {\r\n    let status = null;\r\n    try {\r\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\r\n    }\r\n    catch (e) {\r\n        handlerCheck(false);\r\n    }\r\n    const allowedStatus = allowed || ['active'];\r\n    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\r\n    return status;\r\n}\r\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const metadataForUpload = metadataForUpload_(location, blob, metadata);\r\n    const urlParams = { name: metadataForUpload['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'resumable',\r\n        'X-Goog-Upload-Command': 'start',\r\n        'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\r\n        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    };\r\n    const body = toResourceString(metadataForUpload, mappings);\r\n    const timeout = service.maxUploadRetryTime;\r\n    function handler(xhr) {\r\n        checkResumeHeader_(xhr);\r\n        let url;\r\n        try {\r\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        handlerCheck(isString(url));\r\n        return url;\r\n    }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\r\nfunction getResumableUploadStatus(service, location, url, blob) {\r\n    const headers = { 'X-Goog-Upload-Command': 'query' };\r\n    function handler(xhr) {\r\n        const status = checkResumeHeader_(xhr, ['active', 'final']);\r\n        let sizeString = null;\r\n        try {\r\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        if (!sizeString) {\r\n            // null or empty string\r\n            handlerCheck(false);\r\n        }\r\n        const size = Number(sizeString);\r\n        handlerCheck(!isNaN(size));\r\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\r\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\r\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\r\n    // TODO(andysoto): standardize on internal asserts\r\n    // assert(!(opt_status && opt_status.finalized));\r\n    const status_ = new ResumableUploadStatus(0, 0);\r\n    if (status) {\r\n        status_.current = status.current;\r\n        status_.total = status.total;\r\n    }\r\n    else {\r\n        status_.current = 0;\r\n        status_.total = blob.size();\r\n    }\r\n    if (blob.size() !== status_.total) {\r\n        throw serverFileWrongSize();\r\n    }\r\n    const bytesLeft = status_.total - status_.current;\r\n    let bytesToUpload = bytesLeft;\r\n    if (chunkSize > 0) {\r\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\r\n    }\r\n    const startByte = status_.current;\r\n    const endByte = startByte + bytesToUpload;\r\n    const uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\r\n    const headers = {\r\n        'X-Goog-Upload-Command': uploadCommand,\r\n        'X-Goog-Upload-Offset': `${status_.current}`\r\n    };\r\n    const body = blob.slice(startByte, endByte);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    function handler(xhr, text) {\r\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\r\n        // the 'x-range-md5' header comes back with status code 308 responses.\r\n        // We'll only be able to bail out though, because you can't re-upload a\r\n        // range that you previously uploaded.\r\n        const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\r\n        const newCurrent = status_.current + bytesToUpload;\r\n        const size = blob.size();\r\n        let metadata;\r\n        if (uploadStatus === 'final') {\r\n            metadata = metadataHandler(service, mappings)(xhr, text);\r\n        }\r\n        else {\r\n            metadata = null;\r\n        }\r\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.progressCallback = progressCallback || null;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\r\nconst TaskEvent = {\r\n    /**\r\n     * For this event,\r\n     * <ul>\r\n     *   <li>The `next` function is triggered on progress updates and when the\r\n     *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n     *       argument.</li>\r\n     *   <li>The `error` function is triggered if the upload is canceled or fails\r\n     *       for another reason.</li>\r\n     *   <li>The `complete` function is triggered if the upload completes\r\n     *       successfully.</li>\r\n     * </ul>\r\n     */\r\n    STATE_CHANGED: 'state_changed'\r\n};\r\n// type keys = keyof TaskState\r\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\r\nconst TaskState = {\r\n    /** The task is currently transferring data. */\r\n    RUNNING: 'running',\r\n    /** The task was paused by the user. */\r\n    PAUSED: 'paused',\r\n    /** The task completed successfully. */\r\n    SUCCESS: 'success',\r\n    /** The task was canceled. */\r\n    CANCELED: 'canceled',\r\n    /** The task failed with an error. */\r\n    ERROR: 'error'\r\n};\r\nfunction taskStateFromInternalTaskState(state) {\r\n    switch (state) {\r\n        case \"running\" /* RUNNING */:\r\n        case \"pausing\" /* PAUSING */:\r\n        case \"canceling\" /* CANCELING */:\r\n            return TaskState.RUNNING;\r\n        case \"paused\" /* PAUSED */:\r\n            return TaskState.PAUSED;\r\n        case \"success\" /* SUCCESS */:\r\n            return TaskState.SUCCESS;\r\n        case \"canceled\" /* CANCELED */:\r\n            return TaskState.CANCELED;\r\n        case \"error\" /* ERROR */:\r\n            return TaskState.ERROR;\r\n        default:\r\n            // TODO(andysoto): assert(false);\r\n            return TaskState.ERROR;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Observer {\r\n    constructor(nextOrObserver, error, complete) {\r\n        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\r\n        if (asFunctions) {\r\n            this.next = nextOrObserver;\r\n            this.error = error !== null && error !== void 0 ? error : undefined;\r\n            this.complete = complete !== null && complete !== void 0 ? complete : undefined;\r\n        }\r\n        else {\r\n            const observer = nextOrObserver;\r\n            this.next = observer.next;\r\n            this.error = observer.error;\r\n            this.complete = observer.complete;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(f) {\r\n    return (...argsToForward) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.resolve().then(() => f(...argsToForward));\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** An override for the text-based Connection. Used in tests. */\r\nlet textFactoryOverride = null;\r\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\r\nclass XhrConnection {\r\n    constructor() {\r\n        this.sent_ = false;\r\n        this.xhr_ = new XMLHttpRequest();\r\n        this.initXhr();\r\n        this.errorCode_ = ErrorCode.NO_ERROR;\r\n        this.sendPromise_ = new Promise(resolve => {\r\n            this.xhr_.addEventListener('abort', () => {\r\n                this.errorCode_ = ErrorCode.ABORT;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('error', () => {\r\n                this.errorCode_ = ErrorCode.NETWORK_ERROR;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('load', () => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    send(url, method, body, headers) {\r\n        if (this.sent_) {\r\n            throw internalError('cannot .send() more than once');\r\n        }\r\n        this.sent_ = true;\r\n        this.xhr_.open(method, url, true);\r\n        if (headers !== undefined) {\r\n            for (const key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    this.xhr_.setRequestHeader(key, headers[key].toString());\r\n                }\r\n            }\r\n        }\r\n        if (body !== undefined) {\r\n            this.xhr_.send(body);\r\n        }\r\n        else {\r\n            this.xhr_.send();\r\n        }\r\n        return this.sendPromise_;\r\n    }\r\n    getErrorCode() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorCode() before sending');\r\n        }\r\n        return this.errorCode_;\r\n    }\r\n    getStatus() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getStatus() before sending');\r\n        }\r\n        try {\r\n            return this.xhr_.status;\r\n        }\r\n        catch (e) {\r\n            return -1;\r\n        }\r\n    }\r\n    getResponse() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getResponse() before sending');\r\n        }\r\n        return this.xhr_.response;\r\n    }\r\n    getErrorText() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorText() before sending');\r\n        }\r\n        return this.xhr_.statusText;\r\n    }\r\n    /** Aborts the request. */\r\n    abort() {\r\n        this.xhr_.abort();\r\n    }\r\n    getResponseHeader(header) {\r\n        return this.xhr_.getResponseHeader(header);\r\n    }\r\n    addUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.addEventListener('progress', listener);\r\n        }\r\n    }\r\n    removeUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.removeEventListener('progress', listener);\r\n        }\r\n    }\r\n}\r\nclass XhrTextConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'text';\r\n    }\r\n}\r\nfunction newTextConnection() {\r\n    return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\r\n}\r\nclass XhrBytesConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'arraybuffer';\r\n    }\r\n}\r\nfunction newBytesConnection() {\r\n    return new XhrBytesConnection();\r\n}\r\nclass XhrBlobConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'blob';\r\n    }\r\n}\r\nfunction newBlobConnection() {\r\n    return new XhrBlobConnection();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\r\nclass UploadTask {\r\n    /**\r\n     * @param ref - The firebaseStorage.Reference object this task came\r\n     *     from, untyped to avoid cyclic dependencies.\r\n     * @param blob - The blob to upload.\r\n     */\r\n    constructor(ref, blob, metadata = null) {\r\n        /**\r\n         * Number of bytes transferred so far.\r\n         */\r\n        this._transferred = 0;\r\n        this._needToFetchStatus = false;\r\n        this._needToFetchMetadata = false;\r\n        this._observers = [];\r\n        this._error = undefined;\r\n        this._uploadUrl = undefined;\r\n        this._request = undefined;\r\n        this._chunkMultiplier = 1;\r\n        this._resolve = undefined;\r\n        this._reject = undefined;\r\n        this._ref = ref;\r\n        this._blob = blob;\r\n        this._metadata = metadata;\r\n        this._mappings = getMappings();\r\n        this._resumable = this._shouldDoResumable(this._blob);\r\n        this._state = \"running\" /* RUNNING */;\r\n        this._errorHandler = error => {\r\n            this._request = undefined;\r\n            this._chunkMultiplier = 1;\r\n            if (error._codeEquals(\"canceled\" /* CANCELED */)) {\r\n                this._needToFetchStatus = true;\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                this._error = error;\r\n                this._transition(\"error\" /* ERROR */);\r\n            }\r\n        };\r\n        this._metadataErrorHandler = error => {\r\n            this._request = undefined;\r\n            if (error._codeEquals(\"canceled\" /* CANCELED */)) {\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                this._error = error;\r\n                this._transition(\"error\" /* ERROR */);\r\n            }\r\n        };\r\n        this._promise = new Promise((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n            this._start();\r\n        });\r\n        // Prevent uncaught rejections on the internal promise from bubbling out\r\n        // to the top level with a dummy handler.\r\n        this._promise.then(null, () => { });\r\n    }\r\n    _makeProgressCallback() {\r\n        const sizeBefore = this._transferred;\r\n        return loaded => this._updateProgress(sizeBefore + loaded);\r\n    }\r\n    _shouldDoResumable(blob) {\r\n        return blob.size() > 256 * 1024;\r\n    }\r\n    _start() {\r\n        if (this._state !== \"running\" /* RUNNING */) {\r\n            // This can happen if someone pauses us in a resume callback, for example.\r\n            return;\r\n        }\r\n        if (this._request !== undefined) {\r\n            return;\r\n        }\r\n        if (this._resumable) {\r\n            if (this._uploadUrl === undefined) {\r\n                this._createResumable();\r\n            }\r\n            else {\r\n                if (this._needToFetchStatus) {\r\n                    this._fetchStatus();\r\n                }\r\n                else {\r\n                    if (this._needToFetchMetadata) {\r\n                        // Happens if we miss the metadata on upload completion.\r\n                        this._fetchMetadata();\r\n                    }\r\n                    else {\r\n                        this._continueUpload();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._oneShotUpload();\r\n        }\r\n    }\r\n    _resolveToken(callback) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.all([\r\n            this._ref.storage._getAuthToken(),\r\n            this._ref.storage._getAppCheckToken()\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            switch (this._state) {\r\n                case \"running\" /* RUNNING */:\r\n                    callback(authToken, appCheckToken);\r\n                    break;\r\n                case \"canceling\" /* CANCELING */:\r\n                    this._transition(\"canceled\" /* CANCELED */);\r\n                    break;\r\n                case \"pausing\" /* PAUSING */:\r\n                    this._transition(\"paused\" /* PAUSED */);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    // TODO(andysoto): assert false\r\n    _createResumable() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = createRequest;\r\n            createRequest.getPromise().then((url) => {\r\n                this._request = undefined;\r\n                this._uploadUrl = url;\r\n                this._needToFetchStatus = false;\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _fetchStatus() {\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\r\n            const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = statusRequest;\r\n            statusRequest.getPromise().then(status => {\r\n                status = status;\r\n                this._request = undefined;\r\n                this._updateProgress(status.current);\r\n                this._needToFetchStatus = false;\r\n                if (status.finalized) {\r\n                    this._needToFetchMetadata = true;\r\n                }\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _continueUpload() {\r\n        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        const status = new ResumableUploadStatus(this._transferred, this._blob.size());\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            let requestInfo;\r\n            try {\r\n                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\r\n            }\r\n            catch (e) {\r\n                this._error = e;\r\n                this._transition(\"error\" /* ERROR */);\r\n                return;\r\n            }\r\n            const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = uploadRequest;\r\n            uploadRequest.getPromise().then((newStatus) => {\r\n                this._increaseMultiplier();\r\n                this._request = undefined;\r\n                this._updateProgress(newStatus.current);\r\n                if (newStatus.finalized) {\r\n                    this._metadata = newStatus.metadata;\r\n                    this._transition(\"success\" /* SUCCESS */);\r\n                }\r\n                else {\r\n                    this.completeTransitions_();\r\n                }\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _increaseMultiplier() {\r\n        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        // Max chunk size is 32M.\r\n        if (currentSize < 32 * 1024 * 1024) {\r\n            this._chunkMultiplier *= 2;\r\n        }\r\n    }\r\n    _fetchMetadata() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\r\n            const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = metadataRequest;\r\n            metadataRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._transition(\"success\" /* SUCCESS */);\r\n            }, this._metadataErrorHandler);\r\n        });\r\n    }\r\n    _oneShotUpload() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = multipartRequest;\r\n            multipartRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._updateProgress(this._blob.size());\r\n                this._transition(\"success\" /* SUCCESS */);\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _updateProgress(transferred) {\r\n        const old = this._transferred;\r\n        this._transferred = transferred;\r\n        // A progress update can make the \"transferred\" value smaller (e.g. a\r\n        // partial upload not completed by server, after which the \"transferred\"\r\n        // value may reset to the value at the beginning of the request).\r\n        if (this._transferred !== old) {\r\n            this._notifyObservers();\r\n        }\r\n    }\r\n    _transition(state) {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n        switch (state) {\r\n            case \"canceling\" /* CANCELING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                if (this._request !== undefined) {\r\n                    this._request.cancel();\r\n                }\r\n                break;\r\n            case \"pausing\" /* PAUSING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING);\r\n                this._state = state;\r\n                if (this._request !== undefined) {\r\n                    this._request.cancel();\r\n                }\r\n                break;\r\n            case \"running\" /* RUNNING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                const wasPaused = this._state === \"paused\" /* PAUSED */;\r\n                this._state = state;\r\n                if (wasPaused) {\r\n                    this._notifyObservers();\r\n                    this._start();\r\n                }\r\n                break;\r\n            case \"paused\" /* PAUSED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"canceled\" /* CANCELED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._error = canceled();\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"error\" /* ERROR */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"success\" /* SUCCESS */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n        }\r\n    }\r\n    completeTransitions_() {\r\n        switch (this._state) {\r\n            case \"pausing\" /* PAUSING */:\r\n                this._transition(\"paused\" /* PAUSED */);\r\n                break;\r\n            case \"canceling\" /* CANCELING */:\r\n                this._transition(\"canceled\" /* CANCELED */);\r\n                break;\r\n            case \"running\" /* RUNNING */:\r\n                this._start();\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * A snapshot of the current task state.\r\n     */\r\n    get snapshot() {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        return {\r\n            bytesTransferred: this._transferred,\r\n            totalBytes: this._blob.size(),\r\n            state: externalState,\r\n            metadata: this._metadata,\r\n            task: this,\r\n            ref: this._ref\r\n        };\r\n    }\r\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */\r\n    on(type, nextOrObserver, error, completed) {\r\n        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\r\n        this._addObserver(observer);\r\n        return () => {\r\n            this._removeObserver(observer);\r\n        };\r\n    }\r\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */\r\n    then(onFulfilled, onRejected) {\r\n        // These casts are needed so that TypeScript can infer the types of the\r\n        // resulting Promise.\r\n        return this._promise.then(onFulfilled, onRejected);\r\n    }\r\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\r\n    catch(onRejected) {\r\n        return this.then(null, onRejected);\r\n    }\r\n    /**\r\n     * Adds the given observer.\r\n     */\r\n    _addObserver(observer) {\r\n        this._observers.push(observer);\r\n        this._notifyObserver(observer);\r\n    }\r\n    /**\r\n     * Removes the given observer.\r\n     */\r\n    _removeObserver(observer) {\r\n        const i = this._observers.indexOf(observer);\r\n        if (i !== -1) {\r\n            this._observers.splice(i, 1);\r\n        }\r\n    }\r\n    _notifyObservers() {\r\n        this._finishPromise();\r\n        const observers = this._observers.slice();\r\n        observers.forEach(observer => {\r\n            this._notifyObserver(observer);\r\n        });\r\n    }\r\n    _finishPromise() {\r\n        if (this._resolve !== undefined) {\r\n            let triggered = true;\r\n            switch (taskStateFromInternalTaskState(this._state)) {\r\n                case TaskState.SUCCESS:\r\n                    async(this._resolve.bind(null, this.snapshot))();\r\n                    break;\r\n                case TaskState.CANCELED:\r\n                case TaskState.ERROR:\r\n                    const toCall = this._reject;\r\n                    async(toCall.bind(null, this._error))();\r\n                    break;\r\n                default:\r\n                    triggered = false;\r\n                    break;\r\n            }\r\n            if (triggered) {\r\n                this._resolve = undefined;\r\n                this._reject = undefined;\r\n            }\r\n        }\r\n    }\r\n    _notifyObserver(observer) {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        switch (externalState) {\r\n            case TaskState.RUNNING:\r\n            case TaskState.PAUSED:\r\n                if (observer.next) {\r\n                    async(observer.next.bind(observer, this.snapshot))();\r\n                }\r\n                break;\r\n            case TaskState.SUCCESS:\r\n                if (observer.complete) {\r\n                    async(observer.complete.bind(observer))();\r\n                }\r\n                break;\r\n            case TaskState.CANCELED:\r\n            case TaskState.ERROR:\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n                break;\r\n            default:\r\n                // TODO(andysoto): assert(false);\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n        }\r\n    }\r\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    resume() {\r\n        const valid = this._state === \"paused\" /* PAUSED */ ||\r\n            this._state === \"pausing\" /* PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"running\" /* RUNNING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    pause() {\r\n        const valid = this._state === \"running\" /* RUNNING */;\r\n        if (valid) {\r\n            this._transition(\"pausing\" /* PAUSING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    cancel() {\r\n        const valid = this._state === \"running\" /* RUNNING */ ||\r\n            this._state === \"pausing\" /* PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"canceling\" /* CANCELING */);\r\n        }\r\n        return valid;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\r\nclass Reference {\r\n    constructor(_service, location) {\r\n        this._service = _service;\r\n        if (location instanceof Location) {\r\n            this._location = location;\r\n        }\r\n        else {\r\n            this._location = Location.makeFromUrl(location, _service.host);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the URL for the bucket and path this object references,\r\n     *     in the form gs://<bucket>/<object-path>\r\n     * @override\r\n     */\r\n    toString() {\r\n        return 'gs://' + this._location.bucket + '/' + this._location.path;\r\n    }\r\n    _newRef(service, location) {\r\n        return new Reference(service, location);\r\n    }\r\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\r\n    get root() {\r\n        const location = new Location(this._location.bucket, '');\r\n        return this._newRef(this._service, location);\r\n    }\r\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\r\n    get bucket() {\r\n        return this._location.bucket;\r\n    }\r\n    /**\r\n     * The full path of this object.\r\n     */\r\n    get fullPath() {\r\n        return this._location.path;\r\n    }\r\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\r\n    get name() {\r\n        return lastComponent(this._location.path);\r\n    }\r\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\r\n    get storage() {\r\n        return this._service;\r\n    }\r\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\r\n    get parent() {\r\n        const newPath = parent(this._location.path);\r\n        if (newPath === null) {\r\n            return null;\r\n        }\r\n        const location = new Location(this._location.bucket, newPath);\r\n        return new Reference(this._service, location);\r\n    }\r\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */\r\n    _throwIfRoot(name) {\r\n        if (this._location.path === '') {\r\n            throw invalidRootOperation(name);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\r\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBytes');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBytesConnection)\r\n        .then(bytes => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            bytes.slice(0, maxDownloadSizeBytes)\r\n        : bytes);\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\r\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBlob');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBlobConnection)\r\n        .then(blob => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            blob.slice(0, maxDownloadSizeBytes)\r\n        : blob);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytes');\r\n    const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(finalMetadata => {\r\n        return {\r\n            metadata: finalMetadata,\r\n            ref\r\n        };\r\n    });\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytesResumable');\r\n    return new UploadTask(ref, new FbsBlob(data), metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\r\n    ref._throwIfRoot('uploadString');\r\n    const data = dataFromString(format, value);\r\n    const metadataClone = Object.assign({}, metadata);\r\n    if (metadataClone['contentType'] == null && data.contentType != null) {\r\n        metadataClone['contentType'] = data.contentType;\r\n    }\r\n    return uploadBytes$1(ref, data.data, metadataClone);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll$1(ref) {\r\n    const accumulator = {\r\n        prefixes: [],\r\n        items: []\r\n    };\r\n    return listAllHelper(ref, accumulator).then(() => accumulator);\r\n}\r\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\r\nasync function listAllHelper(ref, accumulator, pageToken) {\r\n    const opt = {\r\n        // maxResults is 1000 by default.\r\n        pageToken\r\n    };\r\n    const nextPage = await list$1(ref, opt);\r\n    accumulator.prefixes.push(...nextPage.prefixes);\r\n    accumulator.items.push(...nextPage.items);\r\n    if (nextPage.nextPageToken != null) {\r\n        await listAllHelper(ref, accumulator, nextPage.nextPageToken);\r\n    }\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list$1(ref, options) {\r\n    if (options != null) {\r\n        if (typeof options.maxResults === 'number') {\r\n            validateNumber('options.maxResults', \r\n            /* minValue= */ 1, \r\n            /* maxValue= */ 1000, options.maxResults);\r\n        }\r\n    }\r\n    const op = options || {};\r\n    const requestInfo = list$2(ref.storage, ref._location, \r\n    /*delimiter= */ '/', op.pageToken, op.maxResults);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\r\nfunction getMetadata$1(ref) {\r\n    ref._throwIfRoot('getMetadata');\r\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\r\nfunction updateMetadata$1(ref, metadata) {\r\n    ref._throwIfRoot('updateMetadata');\r\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL$1(ref) {\r\n    ref._throwIfRoot('getDownloadURL');\r\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(url => {\r\n        if (url === null) {\r\n            throw noDownloadURL();\r\n        }\r\n        return url;\r\n    });\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject$1(ref) {\r\n    ref._throwIfRoot('deleteObject');\r\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\r\nfunction _getChild$1(ref, childPath) {\r\n    const newPath = child(ref._location.path, childPath);\r\n    const location = new Location(ref._location.bucket, newPath);\r\n    return new Reference(ref.storage, location);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\r\nfunction refFromURL(service, url) {\r\n    return new Reference(service, url);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\r\nfunction refFromPath(ref, path) {\r\n    if (ref instanceof FirebaseStorageImpl) {\r\n        const service = ref;\r\n        if (service._bucket == null) {\r\n            throw noDefaultBucket();\r\n        }\r\n        const reference = new Reference(service, service._bucket);\r\n        if (path != null) {\r\n            return refFromPath(reference, path);\r\n        }\r\n        else {\r\n            return reference;\r\n        }\r\n    }\r\n    else {\r\n        // ref is a Reference\r\n        if (path !== undefined) {\r\n            return _getChild$1(ref, path);\r\n        }\r\n        else {\r\n            return ref;\r\n        }\r\n    }\r\n}\r\nfunction ref$1(serviceOrRef, pathOrUrl) {\r\n    if (pathOrUrl && isUrl(pathOrUrl)) {\r\n        if (serviceOrRef instanceof FirebaseStorageImpl) {\r\n            return refFromURL(serviceOrRef, pathOrUrl);\r\n        }\r\n        else {\r\n            throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\r\n        }\r\n    }\r\n    else {\r\n        return refFromPath(serviceOrRef, pathOrUrl);\r\n    }\r\n}\r\nfunction extractBucket(host, config) {\r\n    const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\r\n    if (bucketString == null) {\r\n        return null;\r\n    }\r\n    return Location.makeFromBucketSpec(bucketString, host);\r\n}\r\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\r\n    storage.host = `${host}:${port}`;\r\n    storage._protocol = 'http';\r\n    const { mockUserToken } = options;\r\n    if (mockUserToken) {\r\n        storage._overrideAuthToken =\r\n            typeof mockUserToken === 'string'\r\n                ? mockUserToken\r\n                : createMockUserToken(mockUserToken, storage.app.options.projectId);\r\n    }\r\n}\r\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\r\nclass FirebaseStorageImpl {\r\n    constructor(\r\n    /**\r\n     * FirebaseApp associated with this StorageService instance.\r\n     */\r\n    app, _authProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _appCheckProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _url, _firebaseVersion) {\r\n        this.app = app;\r\n        this._authProvider = _authProvider;\r\n        this._appCheckProvider = _appCheckProvider;\r\n        this._url = _url;\r\n        this._firebaseVersion = _firebaseVersion;\r\n        this._bucket = null;\r\n        /**\r\n         * This string can be in the formats:\r\n         * - host\r\n         * - host:port\r\n         */\r\n        this._host = DEFAULT_HOST;\r\n        this._protocol = 'https';\r\n        this._appId = null;\r\n        this._deleted = false;\r\n        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\r\n        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\r\n        this._requests = new Set();\r\n        if (_url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(_url, this._host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(this._host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The host string for this service, in the form of `host` or\r\n     * `host:port`.\r\n     */\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(host) {\r\n        this._host = host;\r\n        if (this._url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(this._url, host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\r\n    get maxUploadRetryTime() {\r\n        return this._maxUploadRetryTime;\r\n    }\r\n    set maxUploadRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxUploadRetryTime = time;\r\n    }\r\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\r\n    get maxOperationRetryTime() {\r\n        return this._maxOperationRetryTime;\r\n    }\r\n    set maxOperationRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxOperationRetryTime = time;\r\n    }\r\n    async _getAuthToken() {\r\n        if (this._overrideAuthToken) {\r\n            return this._overrideAuthToken;\r\n        }\r\n        const auth = this._authProvider.getImmediate({ optional: true });\r\n        if (auth) {\r\n            const tokenData = await auth.getToken();\r\n            if (tokenData !== null) {\r\n                return tokenData.accessToken;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    async _getAppCheckToken() {\r\n        const appCheck = this._appCheckProvider.getImmediate({ optional: true });\r\n        if (appCheck) {\r\n            const result = await appCheck.getToken();\r\n            // TODO: What do we want to do if there is an error getting the token?\r\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\r\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\r\n            // the token (actual or dummy) to send requests.\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\r\n    _delete() {\r\n        if (!this._deleted) {\r\n            this._deleted = true;\r\n            this._requests.forEach(request => request.cancel());\r\n            this._requests.clear();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */\r\n    _makeStorageReference(loc) {\r\n        return new Reference(this, loc);\r\n    }\r\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */\r\n    _makeRequest(requestInfo, requestFactory, authToken, appCheckToken) {\r\n        if (!this._deleted) {\r\n            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion);\r\n            this._requests.add(request);\r\n            // Request removes itself from set when complete.\r\n            request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\r\n            return request;\r\n        }\r\n        else {\r\n            return new FailRequest(appDeleted());\r\n        }\r\n    }\r\n    async makeRequestWithTokens(requestInfo, requestFactory) {\r\n        const [authToken, appCheckToken] = await Promise.all([\r\n            this._getAuthToken(),\r\n            this._getAppCheckToken()\r\n        ]);\r\n        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\r\n    }\r\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.9.5\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\r\nfunction getBytes(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBytesInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytes$1(ref, data, metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString(ref, value, format, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadString$1(ref, value, format, metadata);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytesResumable$1(ref, data, metadata);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\r\nfunction getMetadata(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getMetadata$1(ref);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\r\nfunction updateMetadata(ref, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return updateMetadata$1(ref, metadata);\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list(ref, options) {\r\n    ref = getModularInstance(ref);\r\n    return list$1(ref, options);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll(ref) {\r\n    ref = getModularInstance(ref);\r\n    return listAll$1(ref);\r\n}\r\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getDownloadURL$1(ref);\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject(ref) {\r\n    ref = getModularInstance(ref);\r\n    return deleteObject$1(ref);\r\n}\r\nfunction ref(serviceOrRef, pathOrUrl) {\r\n    serviceOrRef = getModularInstance(serviceOrRef);\r\n    return ref$1(serviceOrRef, pathOrUrl);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction _getChild(ref, childPath) {\r\n    return _getChild$1(ref, childPath);\r\n}\r\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\r\nfunction getStorage(app = getApp(), bucketUrl) {\r\n    app = getModularInstance(app);\r\n    const storageProvider = _getProvider(app, STORAGE_TYPE);\r\n    const storageInstance = storageProvider.getImmediate({\r\n        identifier: bucketUrl\r\n    });\r\n    return storageInstance;\r\n}\r\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\r\nfunction connectStorageEmulator(storage, host, port, options = {}) {\r\n    connectStorageEmulator$1(storage, host, port, options);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\r\nfunction getBlob(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBlobInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\r\nfunction getStream(ref, maxDownloadSizeBytes) {\r\n    throw new Error('getStream() is only supported by NodeJS builds');\r\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    const app = container.getProvider('app').getImmediate();\r\n    const authProvider = container.getProvider('auth-internal');\r\n    const appCheckProvider = container.getProvider('app-check-internal');\r\n    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\r\n}\r\nfunction registerStorage() {\r\n    _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\r\n    registerVersion(name, version, '');\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\r\nregisterStorage();\n\nexport { StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n//# sourceMappingURL=index.esm2017.js.map\n","import firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, StringFormat, _dataFromString, _UploadTask, _FbsBlob, listAll, list, getMetadata, updateMetadata, getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UploadTaskSnapshotCompat {\r\n    constructor(_delegate, task, ref) {\r\n        this._delegate = _delegate;\r\n        this.task = task;\r\n        this.ref = ref;\r\n    }\r\n    get bytesTransferred() {\r\n        return this._delegate.bytesTransferred;\r\n    }\r\n    get metadata() {\r\n        return this._delegate.metadata;\r\n    }\r\n    get state() {\r\n        return this._delegate.state;\r\n    }\r\n    get totalBytes() {\r\n        return this._delegate.totalBytes;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UploadTaskCompat {\r\n    constructor(_delegate, _ref) {\r\n        this._delegate = _delegate;\r\n        this._ref = _ref;\r\n        this.cancel = this._delegate.cancel.bind(this._delegate);\r\n        this.catch = this._delegate.catch.bind(this._delegate);\r\n        this.pause = this._delegate.pause.bind(this._delegate);\r\n        this.resume = this._delegate.resume.bind(this._delegate);\r\n    }\r\n    get snapshot() {\r\n        return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\r\n    }\r\n    then(onFulfilled, onRejected) {\r\n        return this._delegate.then(snapshot => {\r\n            if (onFulfilled) {\r\n                return onFulfilled(new UploadTaskSnapshotCompat(snapshot, this, this._ref));\r\n            }\r\n        }, onRejected);\r\n    }\r\n    on(type, nextOrObserver, error, completed) {\r\n        let wrappedNextOrObserver = undefined;\r\n        if (!!nextOrObserver) {\r\n            if (typeof nextOrObserver === 'function') {\r\n                wrappedNextOrObserver = (taskSnapshot) => nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref));\r\n            }\r\n            else {\r\n                wrappedNextOrObserver = {\r\n                    next: !!nextOrObserver.next\r\n                        ? (taskSnapshot) => nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref))\r\n                        : undefined,\r\n                    complete: nextOrObserver.complete || undefined,\r\n                    error: nextOrObserver.error || undefined\r\n                };\r\n            }\r\n        }\r\n        return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\r\n    }\r\n}\n\nclass ListResultCompat {\r\n    constructor(_delegate, _service) {\r\n        this._delegate = _delegate;\r\n        this._service = _service;\r\n    }\r\n    get prefixes() {\r\n        return this._delegate.prefixes.map(ref => new ReferenceCompat(ref, this._service));\r\n    }\r\n    get items() {\r\n        return this._delegate.items.map(ref => new ReferenceCompat(ref, this._service));\r\n    }\r\n    get nextPageToken() {\r\n        return this._delegate.nextPageToken || null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ReferenceCompat {\r\n    constructor(_delegate, storage) {\r\n        this._delegate = _delegate;\r\n        this.storage = storage;\r\n    }\r\n    get name() {\r\n        return this._delegate.name;\r\n    }\r\n    get bucket() {\r\n        return this._delegate.bucket;\r\n    }\r\n    get fullPath() {\r\n        return this._delegate.fullPath;\r\n    }\r\n    toString() {\r\n        return this._delegate.toString();\r\n    }\r\n    /**\r\n     * @returns A reference to the object obtained by\r\n     * appending childPath, removing any duplicate, beginning, or trailing\r\n     * slashes.\r\n     */\r\n    child(childPath) {\r\n        const reference = _getChild(this._delegate, childPath);\r\n        return new ReferenceCompat(reference, this.storage);\r\n    }\r\n    get root() {\r\n        return new ReferenceCompat(this._delegate.root, this.storage);\r\n    }\r\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\r\n    get parent() {\r\n        const reference = this._delegate.parent;\r\n        if (reference == null) {\r\n            return null;\r\n        }\r\n        return new ReferenceCompat(reference, this.storage);\r\n    }\r\n    /**\r\n     * Uploads a blob to this object's location.\r\n     * @param data - The blob to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\r\n    put(data, metadata) {\r\n        this._throwIfRoot('put');\r\n        return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\r\n    }\r\n    /**\r\n     * Uploads a string to this object's location.\r\n     * @param value - The string to upload.\r\n     * @param format - The format of the string to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\r\n    putString(value, format = StringFormat.RAW, metadata) {\r\n        this._throwIfRoot('putString');\r\n        const data = _dataFromString(format, value);\r\n        const metadataClone = Object.assign({}, metadata);\r\n        if (metadataClone['contentType'] == null && data.contentType != null) {\r\n            metadataClone['contentType'] = data.contentType;\r\n        }\r\n        return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\r\n    }\r\n    /**\r\n     * List all items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * This is a helper method for calling list() repeatedly until there are\r\n     * no more results. The default pagination size is 1000.\r\n     *\r\n     * Note: The results may not be consistent if objects are changed while this\r\n     * operation is running.\r\n     *\r\n     * Warning: listAll may potentially consume too many resources if there are\r\n     * too many results.\r\n     *\r\n     * @returns A Promise that resolves with all the items and prefixes under\r\n     *  the current storage reference. `prefixes` contains references to\r\n     *  sub-directories and `items` contains references to objects in this\r\n     *  folder. `nextPageToken` is never returned.\r\n     */\r\n    listAll() {\r\n        return listAll(this._delegate).then(r => new ListResultCompat(r, this.storage));\r\n    }\r\n    /**\r\n     * List items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * List API is only available for Firebase Rules Version 2.\r\n     *\r\n     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n     * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n     *\r\n     * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n     * support objects whose paths end with \"/\" or contain two consecutive\r\n     * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n     * list() may fail if there are too many unsupported objects in the bucket.\r\n     *\r\n     * @param options - See ListOptions for details.\r\n     * @returns A Promise that resolves with the items and prefixes.\r\n     * `prefixes` contains references to sub-folders and `items`\r\n     * contains references to objects in this folder. `nextPageToken`\r\n     * can be used to get the rest of the results.\r\n     */\r\n    list(options) {\r\n        return list(this._delegate, options || undefined).then(r => new ListResultCompat(r, this.storage));\r\n    }\r\n    /**\r\n     * A `Promise` that resolves with the metadata for this object. If this\r\n     * object doesn't exist or metadata cannot be retreived, the promise is\r\n     * rejected.\r\n     */\r\n    getMetadata() {\r\n        return getMetadata(this._delegate);\r\n    }\r\n    /**\r\n     * Updates the metadata for this object.\r\n     * @param metadata - The new metadata for the object.\r\n     * Only values that have been explicitly set will be changed. Explicitly\r\n     * setting a value to null will remove the metadata.\r\n     * @returns A `Promise` that resolves\r\n     * with the new metadata for this object.\r\n     * @see firebaseStorage.Reference.prototype.getMetadata\r\n     */\r\n    updateMetadata(metadata) {\r\n        return updateMetadata(this._delegate, metadata);\r\n    }\r\n    /**\r\n     * @returns A `Promise` that resolves with the download\r\n     * URL for this object.\r\n     */\r\n    getDownloadURL() {\r\n        return getDownloadURL(this._delegate);\r\n    }\r\n    /**\r\n     * Deletes the object at this location.\r\n     * @returns A `Promise` that resolves if the deletion succeeds.\r\n     */\r\n    delete() {\r\n        this._throwIfRoot('delete');\r\n        return deleteObject(this._delegate);\r\n    }\r\n    _throwIfRoot(name) {\r\n        if (this._delegate._location.path === '') {\r\n            throw _invalidRootOperation(name);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\r\nclass StorageServiceCompat {\r\n    constructor(app, _delegate) {\r\n        this.app = app;\r\n        this._delegate = _delegate;\r\n    }\r\n    get maxOperationRetryTime() {\r\n        return this._delegate.maxOperationRetryTime;\r\n    }\r\n    get maxUploadRetryTime() {\r\n        return this._delegate.maxUploadRetryTime;\r\n    }\r\n    /**\r\n     * Returns a firebaseStorage.Reference for the given path in the default\r\n     * bucket.\r\n     */\r\n    ref(path) {\r\n        if (isUrl(path)) {\r\n            throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\r\n        }\r\n        return new ReferenceCompat(ref(this._delegate, path), this);\r\n    }\r\n    /**\r\n     * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n     * which must be a gs:// or http[s]:// URL.\r\n     */\r\n    refFromURL(url) {\r\n        if (!isUrl(url)) {\r\n            throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\r\n        }\r\n        try {\r\n            _Location.makeFromUrl(url, this._delegate.host);\r\n        }\r\n        catch (e) {\r\n            throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\r\n        }\r\n        return new ReferenceCompat(ref(this._delegate, url), this);\r\n    }\r\n    setMaxUploadRetryTime(time) {\r\n        this._delegate.maxUploadRetryTime = time;\r\n    }\r\n    setMaxOperationRetryTime(time) {\r\n        this._delegate.maxOperationRetryTime = time;\r\n    }\r\n    useEmulator(host, port, options = {}) {\r\n        connectStorageEmulator(this._delegate, host, port, options);\r\n    }\r\n}\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\n\nconst name = \"@firebase/storage-compat\";\nconst version = \"0.1.13\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage-compat';\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    // Dependencies\r\n    const app = container.getProvider('app-compat').getImmediate();\r\n    const storageExp = container\r\n        .getProvider('storage')\r\n        .getImmediate({ identifier: url });\r\n    const storageServiceCompat = new StorageServiceCompat(app, storageExp);\r\n    return storageServiceCompat;\r\n}\r\nfunction registerStorage(instance) {\r\n    const namespaceExports = {\r\n        // no-inline\r\n        TaskState: _TaskState,\r\n        TaskEvent: _TaskEvent,\r\n        StringFormat,\r\n        Storage: StorageServiceCompat,\r\n        Reference: ReferenceCompat\r\n    };\r\n    instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* PUBLIC */)\r\n        .setServiceProps(namespaceExports)\r\n        .setMultipleInstances(true));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterStorage(firebase);\n\nexport { registerStorage };\n//# sourceMappingURL=index.esm2017.js.map\n","// 파이어베이스 앱 객체 모듈 가져오기\r\nimport firebase from 'firebase/compat/app'\r\n// 파이어베이스 패키지 모듈 가져오기\r\nimport 'firebase/compat/database';\r\nimport 'firebase/compat/storage';\r\n\r\n// 파이어베이스 DB를 초기화\r\nconst oFirebase = firebase.initializeApp({\r\n  // 파이어베이스 콘솔에서 복사하여 붙여넣기\r\n  databaseURL: \"https://pwa-camera.firebaseio.com\",\r\n  storageBucket: \"pwa-camera.appspot.com\",\r\n});\r\n// 파이어베이스 DB객체 연결 \r\nconst oDB = oFirebase.database();\r\n\r\n// 파이어베이스 DB객체 중에서 pictures 항목을 다른 곳에서 사용하도록 공개\r\nexport const oPicturesinDB = oDB.ref('pictures');\r\n// 파이어베이스 스토리지 객체 공개\r\nexport const oStorage = oFirebase.storage();","import \"../../../src/components/VGrid/VGrid.sass\";\nimport Vue from 'vue';\nimport mergeData from '../../util/mergeData';\nimport { upperFirst } from '../../util/helpers'; // no xs\n\nconst breakpoints = ['sm', 'md', 'lg', 'xl'];\n\nconst breakpointProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props[val] = {\n      type: [Boolean, String, Number],\n      default: false\n    };\n    return props;\n  }, {});\n})();\n\nconst offsetProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props['offset' + upperFirst(val)] = {\n      type: [String, Number],\n      default: null\n    };\n    return props;\n  }, {});\n})();\n\nconst orderProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props['order' + upperFirst(val)] = {\n      type: [String, Number],\n      default: null\n    };\n    return props;\n  }, {});\n})();\n\nconst propMap = {\n  col: Object.keys(breakpointProps),\n  offset: Object.keys(offsetProps),\n  order: Object.keys(orderProps)\n};\n\nfunction breakpointClass(type, prop, val) {\n  let className = type;\n\n  if (val == null || val === false) {\n    return undefined;\n  }\n\n  if (prop) {\n    const breakpoint = prop.replace(type, '');\n    className += `-${breakpoint}`;\n  } // Handling the boolean style prop when accepting [Boolean, String, Number]\n  // means Vue will not convert <v-col sm></v-col> to sm: true for us.\n  // Since the default is false, an empty string indicates the prop's presence.\n\n\n  if (type === 'col' && (val === '' || val === true)) {\n    // .col-md\n    return className.toLowerCase();\n  } // .order-md-6\n\n\n  className += `-${val}`;\n  return className.toLowerCase();\n}\n\nconst cache = new Map();\nexport default Vue.extend({\n  name: 'v-col',\n  functional: true,\n  props: {\n    cols: {\n      type: [Boolean, String, Number],\n      default: false\n    },\n    ...breakpointProps,\n    offset: {\n      type: [String, Number],\n      default: null\n    },\n    ...offsetProps,\n    order: {\n      type: [String, Number],\n      default: null\n    },\n    ...orderProps,\n    alignSelf: {\n      type: String,\n      default: null,\n      validator: str => ['auto', 'start', 'end', 'center', 'baseline', 'stretch'].includes(str)\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  },\n\n  render(h, {\n    props,\n    data,\n    children,\n    parent\n  }) {\n    // Super-fast memoization based on props, 5x faster than JSON.stringify\n    let cacheKey = '';\n\n    for (const prop in props) {\n      cacheKey += String(props[prop]);\n    }\n\n    let classList = cache.get(cacheKey);\n\n    if (!classList) {\n      classList = []; // Loop through `col`, `offset`, `order` breakpoint props\n\n      let type;\n\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value = props[prop];\n          const className = breakpointClass(type, prop, value);\n          if (className) classList.push(className);\n        });\n      }\n\n      const hasColClasses = classList.some(className => className.startsWith('col-'));\n      classList.push({\n        // Default to .col if no other col-{bp}-* classes generated nor `cols` specified.\n        col: !hasColClasses || !props.cols,\n        [`col-${props.cols}`]: props.cols,\n        [`offset-${props.offset}`]: props.offset,\n        [`order-${props.order}`]: props.order,\n        [`align-self-${props.alignSelf}`]: props.alignSelf\n      });\n      cache.set(cacheKey, classList);\n    }\n\n    return h(props.tag, mergeData(data, {\n      class: classList\n    }), children);\n  }\n\n});\n//# sourceMappingURL=VCol.js.map","// Types\nimport Vue from 'vue';\nexport default function VGrid(name) {\n  /* @vue/component */\n  return Vue.extend({\n    name: `v-${name}`,\n    functional: true,\n    props: {\n      id: String,\n      tag: {\n        type: String,\n        default: 'div'\n      }\n    },\n\n    render(h, {\n      props,\n      data,\n      children\n    }) {\n      data.staticClass = `${name} ${data.staticClass || ''}`.trim();\n      const {\n        attrs\n      } = data;\n\n      if (attrs) {\n        // reset attrs to extract utility clases like pa-3\n        data.attrs = {};\n        const classes = Object.keys(attrs).filter(key => {\n          // TODO: Remove once resolved\n          // https://github.com/vuejs/vue/issues/7841\n          if (key === 'slot') return false;\n          const value = attrs[key]; // add back data attributes like data-test=\"foo\" but do not\n          // add them as classes\n\n          if (key.startsWith('data-')) {\n            data.attrs[key] = value;\n            return false;\n          }\n\n          return value || typeof value === 'string';\n        });\n        if (classes.length) data.staticClass += ` ${classes.join(' ')}`;\n      }\n\n      if (props.id) {\n        data.domProps = data.domProps || {};\n        data.domProps.id = props.id;\n      }\n\n      return h(props.tag, data, children);\n    }\n\n  });\n}\n//# sourceMappingURL=grid.js.map","import \"../../../src/components/VGrid/_grid.sass\";\nimport \"../../../src/components/VGrid/VGrid.sass\";\nimport Grid from './grid';\nimport mergeData from '../../util/mergeData';\n/* @vue/component */\n\nexport default Grid('container').extend({\n  name: 'v-container',\n  functional: true,\n  props: {\n    id: String,\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    fluid: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  render(h, {\n    props,\n    data,\n    children\n  }) {\n    let classes;\n    const {\n      attrs\n    } = data;\n\n    if (attrs) {\n      // reset attrs to extract utility clases like pa-3\n      data.attrs = {};\n      classes = Object.keys(attrs).filter(key => {\n        // TODO: Remove once resolved\n        // https://github.com/vuejs/vue/issues/7841\n        if (key === 'slot') return false;\n        const value = attrs[key]; // add back data attributes like data-test=\"foo\" but do not\n        // add them as classes\n\n        if (key.startsWith('data-')) {\n          data.attrs[key] = value;\n          return false;\n        }\n\n        return value || typeof value === 'string';\n      });\n    }\n\n    if (props.id) {\n      data.domProps = data.domProps || {};\n      data.domProps.id = props.id;\n    }\n\n    return h(props.tag, mergeData(data, {\n      staticClass: 'container',\n      class: Array({\n        'container--fluid': props.fluid\n      }).concat(classes || [])\n    }), children);\n  }\n\n});\n//# sourceMappingURL=VContainer.js.map","import \"../../../src/components/VGrid/VGrid.sass\";\nimport Vue from 'vue';\nimport mergeData from '../../util/mergeData';\nimport { upperFirst } from '../../util/helpers'; // no xs\n\nconst breakpoints = ['sm', 'md', 'lg', 'xl'];\nconst ALIGNMENT = ['start', 'end', 'center'];\n\nfunction makeProps(prefix, def) {\n  return breakpoints.reduce((props, val) => {\n    props[prefix + upperFirst(val)] = def();\n    return props;\n  }, {});\n}\n\nconst alignValidator = str => [...ALIGNMENT, 'baseline', 'stretch'].includes(str);\n\nconst alignProps = makeProps('align', () => ({\n  type: String,\n  default: null,\n  validator: alignValidator\n}));\n\nconst justifyValidator = str => [...ALIGNMENT, 'space-between', 'space-around'].includes(str);\n\nconst justifyProps = makeProps('justify', () => ({\n  type: String,\n  default: null,\n  validator: justifyValidator\n}));\n\nconst alignContentValidator = str => [...ALIGNMENT, 'space-between', 'space-around', 'stretch'].includes(str);\n\nconst alignContentProps = makeProps('alignContent', () => ({\n  type: String,\n  default: null,\n  validator: alignContentValidator\n}));\nconst propMap = {\n  align: Object.keys(alignProps),\n  justify: Object.keys(justifyProps),\n  alignContent: Object.keys(alignContentProps)\n};\nconst classMap = {\n  align: 'align',\n  justify: 'justify',\n  alignContent: 'align-content'\n};\n\nfunction breakpointClass(type, prop, val) {\n  let className = classMap[type];\n\n  if (val == null) {\n    return undefined;\n  }\n\n  if (prop) {\n    // alignSm -> Sm\n    const breakpoint = prop.replace(type, '');\n    className += `-${breakpoint}`;\n  } // .align-items-sm-center\n\n\n  className += `-${val}`;\n  return className.toLowerCase();\n}\n\nconst cache = new Map();\nexport default Vue.extend({\n  name: 'v-row',\n  functional: true,\n  props: {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    dense: Boolean,\n    noGutters: Boolean,\n    align: {\n      type: String,\n      default: null,\n      validator: alignValidator\n    },\n    ...alignProps,\n    justify: {\n      type: String,\n      default: null,\n      validator: justifyValidator\n    },\n    ...justifyProps,\n    alignContent: {\n      type: String,\n      default: null,\n      validator: alignContentValidator\n    },\n    ...alignContentProps\n  },\n\n  render(h, {\n    props,\n    data,\n    children\n  }) {\n    // Super-fast memoization based on props, 5x faster than JSON.stringify\n    let cacheKey = '';\n\n    for (const prop in props) {\n      cacheKey += String(props[prop]);\n    }\n\n    let classList = cache.get(cacheKey);\n\n    if (!classList) {\n      classList = []; // Loop through `align`, `justify`, `alignContent` breakpoint props\n\n      let type;\n\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value = props[prop];\n          const className = breakpointClass(type, prop, value);\n          if (className) classList.push(className);\n        });\n      }\n\n      classList.push({\n        'no-gutters': props.noGutters,\n        'row--dense': props.dense,\n        [`align-${props.align}`]: props.align,\n        [`justify-${props.justify}`]: props.justify,\n        [`align-content-${props.alignContent}`]: props.alignContent\n      });\n      cache.set(cacheKey, classList);\n    }\n\n    return h(props.tag, mergeData(data, {\n      staticClass: 'row',\n      class: classList\n    }), children);\n  }\n\n});\n//# sourceMappingURL=VRow.js.map"],"names":["CONSTANTS","NODE_CLIENT","NODE_ADMIN","SDK_VERSION","assert","assertion","message","assertionError","Error","stringToByteArray$1","str","out","p","i","length","c","charCodeAt","byteArrayToString","bytes","pos","c1","String","fromCharCode","c2","c3","c4","u","join","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","this","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","encodeString","btoa","decodeString","decodeStringToByteArray","charToByteMap","charAt","haveByte4","byte4","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","e","console","error","deepCopy","value","deepExtend","undefined","target","source","Object","constructor","Date","dateValue","getTime","prop","hasOwnProperty","isValidKey","key","Deferred","reject","resolve","promise","Promise","wrapCallback","callback","catch","createMockUserToken","token","projectId","uid","header","alg","type","project","iat","sub","user_id","payload","assign","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","signature","JSON","stringify","getUA","navigator","isMobileCordova","window","test","isBrowser","self","isReactNative","isNodeSdk","isIndexedDBAvailable","indexedDB","validateIndexedDBOpenable","preExist","DB_CHECK_NAME","request","open","onsuccess","result","close","deleteDatabase","onupgradeneeded","onerror","_a","ERROR_NAME","FirebaseError","code","customData","super","name","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","replaceTemplate","fullMessage","PATTERN","_","jsonEval","parse","decode","claims","parts","split","isValidFormat","decoded","isAdmin","contains","obj","call","safeGet","isEmpty","map","fn","contextObj","res","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","querystring","querystringParams","params","entries","forEach","arrayVal","encodeURIComponent","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","d","update","lengthMinusBlock","n","inbuf","digest","totalBits","j","createSubscribe","executor","onNoObservers","proxy","ObserverProxy","subscribe","bind","observers","unsubscribes","observerCount","task","finalized","then","next","forEachObserver","observer","complete","nextOrObserver","implementsAnyMethods","noop","unsub","unsubscribeOne","finalError","sendOne","err","methods","method","validateArgCount","fnName","minCount","maxCount","argCount","argError","errorPrefix","argName","validateCallback","argumentName","optional","validateContextObject","context","stringToByteArray","high","low","stringLength","_delegate","promisifyRequest","errorMessage","event","DBWrapper","_db","objectStoreNames","transaction","storeNames","mode","TransactionWrapper","createObjectStore","storeName","options","ObjectStoreWrapper","_transaction","oncomplete","onabort","objectStore","_store","index","IndexWrapper","createIndex","keypath","get","put","delete","clear","_index","openDB","dbName","dbVersion","upgradeCallback","oldVersion","newVersion","Component","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","getImmediate","getComponent","setComponent","isComponentEager","instanceDeferred","clearInstance","async","services","from","values","all","filter","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","normalizedDeferredIdentifier","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","normalizeIdentifierForFactory","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","now","toISOString","Logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","debug","log","info","warn","level","inst","setUserLogHandler","logCallback","customLogLevel","arg","toString","ignored","toLowerCase","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","version","logString","name$o","version$1","logger","name$n","name$m","name$l","name$k","name$j","name$i","name$h","name$g","name$f","name$e","name$d","name$c","name$b","name$a","name$9","name$8","name$7","name$6","name$5","name$4","name$3","name$2","name$1","PLATFORM_LOG_STRING","_apps","_components","_addComponent","app","_addOrOverwriteComponent","_registerComponent","componentName","heartbeatController","triggerHeartbeat","_removeServiceInstance","_clearComponents","ERRORS","ERROR_FACTORY","FirebaseAppImpl","config","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","initializeApp","rawConfig","existingApp","newApp","getApps","deleteApp","registerVersion","libraryKeyOrName","variant","libraryMismatch","match","versionMismatch","warning","onLog","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","db","originalErrorMessage","readHeartbeatsFromIndexedDB","computeKey","writeHeartbeatsToIndexedDB","heartbeatObject","tx","appId","MAX_HEADER_BYTES","STORED_HEARTBEAT_RETENTION_MAX_MILLIS","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","platformLogger","agent","date","getUTCDateString","lastSentHeartbeatDate","heartbeats","some","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","heartbeatsToSend","unsentEntries","extractHeartbeatsForHeader","headerString","today","substring","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","canUseIndexedDB","idbHeartbeatObject","heartbeatsObject","existingHeartbeatsObject","registerCoreComponents","removeApp","_getService","toJSON","createFirebaseNamespaceCore","firebaseAppImpl","apps","namespace","__esModule","initializeAppCompat","registerComponent","registerComponentCompat","useAsService","modularAPIs","appCompat","componentNameWithoutCompat","serviceNamespace","appArg","serviceFxn","apply","useService","defineProperty","createFirebaseNamespace","extendNamespace","firebase$1","sdkVersion","indexOf","setSDKVersion","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","sha1Bytes","buildLogMessage_","varArgs","firstLog_","enableLogging$1","logger_","persistent","logWrapper","prefix","fatal","warnIfPageIsSecure","location","protocol","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","document","readyState","called","wrappedFn","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","sort","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","v","ebits","fbits","bias","s","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","hexByteString","hexByte","parseInt","substr","isChromeExtensionContentScript","href","isWindowsStoreApp","Windows","UI","errorForServerCode","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","connURL","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","static","forceAllow_","forceDisallow_","createElement","markConnectionHealthy","shutdown_","myDisconnFrame","removeChild","send","dataStr","base64data","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","nextSeg","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","onload","onreadystatechange","rstate","parentNode","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","headers","process","platform","env","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","oldAndroidRegex","oldAndroidMatch","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","on","validateEventType_","eventData","getInitialEvent","off","splice","et","OnlineMonitor","online_","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","GET_CONNECT_TIMEOUT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","q","_queryObject","outstandingGet","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","tryAppCheck","authMethod","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","clientName","NamedNode","node","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","setMaxNode$1","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","setNodeFromJSON","setMaxNode","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON","json","jsonLeaf","childData","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","MIN_PUSH_CHAR","MAX_PUSH_CHAR","MAX_KEY_LEN","nextPushId","lastPushTime","lastRandChars","duplicateTime","timeStampChars","successor","keyAsInt","sourcePlusOne","repeat","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasStartAfter","hasEndBefore","hasLimit","hasAnchoredLimit","queryParamsGetNodeFilter","queryParams","queryParamsLimitToFirst","newLimit","newParams","queryParamsLimitToLast","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsOrderBy","queryParamsToRestQueryStringParameters","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","sparseSnapshotTreeForget","tree","safeToRemove","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","eventGeneratorGenerateEventsForType","registrations","filteredChanges","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","mergeAtPath","layeredCache","subMerge","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorRevertUserWrite","viewProcessorAckUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","eventRegistrations_","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteNode","viewGetCompleteServerCache","cache","viewIsEmpty","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","fromObject","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeGetServerValue","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","splitIndex","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","validateFirebaseData","hasDotValue","hasActualChild","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","errorPrefix$1","validatePriority","validateKey","validatePathString","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoOnServerInfoUpdate","statsReporter_","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","repoServerTime","offsetNode","repoGenerateServerValues","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoGetValue","cached","repoLog","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","resolvedOnDisconnectTree","resolved","repoOnDisconnectCancel","repoOnDisconnectSet","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","repoStartTransaction","transactionUpdate","unwatcher","applyLocally","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","repoGetLatestState","queueNode","nodeQueue","priorityForNode","currentNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","OnDisconnect","cancel","setWithPriority","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","parentPath","DataSnapshot","_node","childRef","exists","hasChildren","_checkNotDeleted","_root","refFromURL","parsedURL","thennablePushRef","pushRef","setPriority","ValueEventRegistration","callbackContext","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","expCallback","QueryConstraint","QueryEndAtConstraint","_value","_apply","endAt","QueryEndBeforeConstraint","endBefore","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","startAfter","QueryLimitToFirstConstraint","_limit","limitToFirst","limit","QueryLimitToLastConstraint","limitToLast","QueryOrderByChildConstraint","parsedPath","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","equalTo","queryConstraints","queryImpl","constraint","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","isEmulator","dbEmulatorHost","authTokenProvider","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appRepos","_repoInternal","_instanceStarted","_rootInternal","apiName","connectDatabaseEmulator","mockUserToken","goOffline","goOnline","enableLogging","registerDatabase","SERVER_TIMESTAMP","serverTimestamp","increment","TransactionResult","committed","runTransaction","promiseComplete","simpleListen","echo","onEcho","validateBoolean","bool","validateEventType","arguments","objectToMerge","newObjectToMerge","_database","getRef","Reference","Query","database","cancelCallbackOrContext","ret","getCancelAndContextArgs_","valueCallback","expSnapshot","once","failureCallbackOrContext","cancelOrContext","getKey","getParent","getRoot","transactionResult","expPromise","expRef","useEmulator","initStandalone","customAuthImpl","ServerValue","TIMESTAMP","freeze","__proto__","databaseExp","DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","StorageError","prependCode","serverResponse","_baseMessage","_codeEquals","unknown","objectNotFound","quotaExceeded","bucket","unauthenticated","unauthorizedApp","unauthorized","retryLimitExceeded","invalidUrl","invalidDefaultBucket","noDefaultBucket","cannotSliceBlob","serverFileWrongSize","noDownloadURL","invalidArgument","appDeleted","invalidRootOperation","invalidFormat","format","internalError","Location","isRoot","fullServerUrl","encode","bucketOnlyServerUrl","bucketString","bucketLocation","makeFromUrl","bucketDomain","gsModify","loc","gsPath","gsRegex","gsIndices","httpModify","firebaseStorageHost","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","group","captures","exec","bucketValue","pathValue","FailRequest","promise_","getPromise","_appDelete","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","callWithDelay","millis","handler","clearGlobalTimeout","mustStop","waitMillis","stopped","stop","wasTimeout","isJustDef","isFunction","isNonArrayObject","isString","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","makeUrl","urlPart","makeQueryString","queryPart","nextPart","ErrorCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","pendingConnection_","backoffId_","canceled_","appDelete_","resolve_","reject_","doTheRequest","backoffCallback","RequestEndStatus","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","isRetryStatusCode_","wasCanceled","ABORT","successCode","backoffDone","requestWentThrough","wasSuccessCode","getResponse","getErrorText","appDelete","abort","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","isRequestSpecificRetryCode","addAuthHeader_","addVersionHeader_","firebaseVersion","addGmpidHeader_","addAppCheckHeader_","makeRequest","requestInfo","requestFactory","successCodes","additionalRetryCodes","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob$1","bb","append","getBlob","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","valid","hi","lo","Uint8Array","percentEncodedBytes_","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","DataURLParts","endsWith","rest","dataUrl","longEnough","FbsBlob","elideCopy","blobType","data_","ArrayBuffer","byteLength","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","uint8Arrays","finalLength","merged","uploadData","jsonObjectOrNull","lastIndexOf","newPath","canonicalChildPath","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","sizeMapping","addRef","generateRef","_makeStorageReference","fromResource","resource","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","base","alt","toResourceString","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromResponseString","RequestInfo","handlerCheck","cndn","metadataHandler","text","listHandler","downloadUrlHandler","_protocol","sharedErrorHandler","newErr","objectErrorHandler","shared","getMetadata$2","maxOperationRetryTime","list$2","delimiter","pageToken","maxResults","getDownloadUrl","updateMetadata$2","deleteObject$2","_xhr","_text","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","ResumableUploadStatus","current","checkResumeHeader_","allowed","getResponseHeader","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","status_","bytesLeft","bytesToUpload","uploadCommand","uploadStatus","newCurrent","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELED","taskStateFromInternalTaskState","state","Observer","asFunctions","argsToForward","textFactoryOverride","XhrConnection","sent_","xhr_","initXhr","errorCode_","sendPromise_","NETWORK_ERROR","setRequestHeader","statusText","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","UploadTask","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","completeTransitions_","_transition","_metadataErrorHandler","_promise","_start","_makeProgressCallback","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","_continueUpload","_oneShotUpload","_resolveToken","storage","_getAuthToken","_getAppCheckToken","_location","createRequest","_makeRequest","statusRequest","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","wasPaused","externalState","bytesTransferred","totalBytes","completed","_addObserver","_removeObserver","onFulfilled","onRejected","_notifyObserver","_finishPromise","triggered","toCall","pause","_service","_newRef","_throwIfRoot","uploadBytesResumable$1","listAll$1","listAllHelper","opt","nextPage","list$1","makeRequestWithTokens","getMetadata$1","updateMetadata$1","getDownloadURL$1","deleteObject$1","_getChild$1","isUrl","refFromPath","FirebaseStorageImpl","_bucket","ref$1","serviceOrRef","pathOrUrl","extractBucket","makeFromBucketSpec","connectStorageEmulator$1","_overrideAuthToken","_authProvider","_appCheckProvider","_url","_firebaseVersion","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","tokenData","STORAGE_TYPE","uploadBytesResumable","getMetadata","updateMetadata","list","listAll","getDownloadURL","deleteObject","_getChild","connectStorageEmulator","factory","registerStorage","UploadTaskSnapshotCompat","UploadTaskCompat","wrappedNextOrObserver","taskSnapshot","ListResultCompat","ReferenceCompat","putString","StorageServiceCompat","setMaxUploadRetryTime","setMaxOperationRetryTime","storageExp","storageServiceCompat","namespaceExports","Storage","oFirebase","storageBucket","oDB","oPicturesinDB","oStorage","breakpoints","breakpointProps","reduce","Boolean","default","offsetProps","orderProps","propMap","col","breakpointClass","className","breakpoint","functional","cols","alignSelf","validator","render","cacheKey","classList","hasColClasses","startsWith","class","staticClass","trim","attrs","classes","domProps","extend","fluid","mergeData","ALIGNMENT","makeProps","def","alignValidator","alignProps","justifyValidator","justifyProps","alignContentValidator","alignContentProps","align","justify","alignContent","classMap","dense","noGutters"],"sourceRoot":""}